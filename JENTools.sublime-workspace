{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sleevej",
				"sleevejnt"
			],
			[
				"ori",
				"ori"
			],
			[
				"mainco",
				"maincons"
			],
			[
				"distance",
				"distances"
			],
			[
				"sl",
				"sleeveRibbon"
			],
			[
				"mini",
				"miniJoint"
			],
			[
				"keN",
				"keyNameJoint"
			],
			[
				"sleeve",
				"sleeveGrp"
			],
			[
				"slee",
				"sleeveControlGRP"
			],
			[
				"sleev",
				"sleeveControl"
			],
			[
				"sleeC",
				"sleeveControl"
			],
			[
				"drvJ",
				"drvJNT"
			],
			[
				"stat",
				"statusIndex"
			],
			[
				"grp",
				"grp"
			],
			[
				"sle",
				"sleeve"
			],
			[
				"_module",
				"_moduleGrp"
			],
			[
				"jntA",
				"jntAGRP"
			],
			[
				"ikFoo",
				"ikFootZTR"
			],
			[
				"ikZ",
				"ikZTRSwitch"
			],
			[
				"rev",
				"reverse"
			],
			[
				"fkZ",
				"fkZTRSwitch"
			],
			[
				"switchC",
				"switchCtrl"
			],
			[
				"swi",
				"switchCTRL"
			],
			[
				"switchCtr",
				"switchCTRL"
			],
			[
				"switch",
				"switchCtrl"
			],
			[
				"abs",
				"abs"
			],
			[
				"ax",
				"axis"
			],
			[
				"max",
				"maximum"
			],
			[
				"temp",
				"tempcoord"
			],
			[
				"round",
				"rounded"
			],
			[
				"pos",
				"posY"
			],
			[
				"_C",
				"_child"
			],
			[
				"handle",
				"handleGRP"
			],
			[
				"df",
				"dftGrp"
			],
			[
				"ikMono",
				"ikMonoList"
			],
			[
				"keyn",
				"keyNameJoint"
			],
			[
				"outSpa",
				"outSpace"
			],
			[
				"ikFoot",
				"ikFootCONS"
			],
			[
				"outSpace",
				"outSpaceGRP"
			],
			[
				"ikspac",
				"ikSpaceGRP"
			],
			[
				"rema",
				"remapList"
			],
			[
				"trans",
				"transform"
			],
			[
				"ikCOnt",
				"ikControlModuleParent"
			],
			[
				"ikCon",
				"ikControlModuleParent"
			],
			[
				"parentS",
				"parentSpaces"
			],
			[
				"parentSpa",
				"parentSpaces"
			],
			[
				"par",
				"parentSpace"
			],
			[
				"scale",
				"scaleGRP"
			],
			[
				"tra",
				"transform"
			],
			[
				"foot",
				"footJoints"
			],
			[
				"sj",
				"sj"
			],
			[
				"end",
				"endikJNT"
			],
			[
				"footJ",
				"footJoints"
			],
			[
				"pare",
				"parent"
			],
			[
				"tempC",
				"tempControlDad"
			],
			[
				"connec",
				"connectAttr"
			],
			[
				"ikHan",
				"ikHandleGRP"
			],
			[
				"invers",
				"inverseJoint"
			],
			[
				"scala",
				"scalableDriverJoints"
			],
			[
				"main",
				"mainJoint"
			],
			[
				"keyN",
				"keyNameJoint"
			],
			[
				"sprea",
				"spreadJoint"
			],
			[
				"finger",
				"fingerCount"
			],
			[
				"hand",
				"handGroup"
			],
			[
				"parent",
				"parentConstraint"
			],
			[
				"ikB",
				"ikBase"
			],
			[
				"space",
				"spaceLocator"
			],
			[
				"a",
				"aCoord"
			],
			[
				"conn",
				"connectAttr"
			],
			[
				"ikEnd",
				"ikEnd"
			],
			[
				"orie",
				"orient1"
			],
			[
				"fkCon",
				"fkCONS"
			],
			[
				"fk",
				"fkZTR"
			],
			[
				"ikC",
				"ikCTRL"
			],
			[
				"C_",
				"C_main_01_CTRL"
			],
			[
				"paren",
				"parentParent"
			],
			[
				"ikStr",
				"ikStartParent"
			],
			[
				"ikStart",
				"ikStartParent"
			],
			[
				"fkC",
				"fkCTRL"
			],
			[
				"upp",
				"upperGRP"
			],
			[
				"Tr",
				"_transform"
			],
			[
				"lis",
				"listAttr"
			],
			[
				"_tr",
				"_transform"
			],
			[
				"world",
				"worldOrient"
			],
			[
				"_tra",
				"_transformParent"
			],
			[
				"worl",
				"worldOrient"
			],
			[
				"ikEn",
				"ikEndChild"
			],
			[
				"s",
				"s"
			],
			[
				"ikTemp",
				"ikTempCTRLShape"
			],
			[
				"joind",
				"jointsDataPath"
			],
			[
				"ikJ",
				"ikJoints"
			],
			[
				"upper",
				"upperTemp"
			],
			[
				"curveV",
				"curveVertexCount"
			],
			[
				"uppeS",
				"upperSkinValue"
			],
			[
				"curve",
				"curveVertexCount"
			],
			[
				"Cur",
				"curveVertex"
			],
			[
				"skin",
				"skinCluster"
			],
			[
				"ikEN",
				"ikEndChild"
			],
			[
				"all",
				"allJoints"
			],
			[
				"Temp",
				"tempAttr"
			],
			[
				"uppe",
				"upperTemp"
			],
			[
				"make",
				"makeIdentity"
			],
			[
				"body",
				"bodyControl"
			],
			[
				"lower",
				"lowerControl"
			],
			[
				"sca",
				"scalableDriverJoints"
			],
			[
				"bodyZTR",
				"bodyZTR"
			],
			[
				"hipData",
				"hipDataPath"
			],
			[
				"skinJ",
				"skinJoints"
			],
			[
				"joint",
				"jointOrient"
			],
			[
				"jointsD",
				"jointsDataPath"
			],
			[
				"getD",
				"getDoubleDictJson"
			],
			[
				"orientM",
				"orientMesh"
			],
			[
				"joi",
				"jointOrientation"
			],
			[
				"setupC",
				"setupControl"
			],
			[
				"key",
				"keyNameLocator"
			],
			[
				"translate",
				"translate"
			],
			[
				"footJo",
				"footJointPos"
			],
			[
				"orientMes",
				"orientMeshFoot"
			],
			[
				"locD",
				"locDict"
			],
			[
				"module",
				"moduleDict"
			],
			[
				"ik",
				"ikModule"
			],
			[
				"list",
				"listRelatives"
			],
			[
				"ikS",
				"ikStart"
			],
			[
				"ski",
				"skinJoint"
			],
			[
				"locato",
				"locatorsPath"
			],
			[
				"controlP",
				"controlsPath"
			],
			[
				"control",
				"controlProxyDict"
			],
			[
				"attr",
				"attributes"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# -*- coding: utf-8 -*-\n##--------------------------------------------------------------------------------------------\n##\n## TO DO:\n##\n##--------------------------------------------------------------------------------------------\n\n# IMPORTS\n\n\nimport maya.cmds as mc\nimport maya.mel as mel\nimport os\nfrom math import pow,sqrt\nimport sys\nimport json\n\njtools = os.getenv(\"JENTOOLS\")\nsys.path.append(jtools)\nprint jtools\n\nfrom functions.Qt import QtCore, QtWidgets\nfrom jenAutoRig.core.loaduifile import loadUi_file, compile_ui, getMayaWindow\nfrom functions import abstractFunctions as absFunc\n\nreload(absFunc)\n\n\n\n\n##--------------------------------------------------------------------------------------------\n## EXTERNAL FILES // CFG + UI + Globals\n##--------------------------------------------------------------------------------------------\napp_folder_win = os.path.dirname(__file__)\nui_main = app_folder_win + \"/\" + \"ui\" + \"/\" + \"jenAutorigUserInterface.ui\"\nform, base = loadUi_file(ui_main)\n\n##--------------------------------------------------------------------------------------------\n## Class: Main UI\n##--------------------------------------------------------------------------------------------\n\nclass ProgramUI(base, form):\n\tdef __init__(self, parent=getMayaWindow()):\n\t\tsuper(ProgramUI,self).__init__(parent)\n\t\tself.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)\n\t\t# startup FUNCTIONS\n\t\tself.setupUi(self)\n\t\tself.setConnections()\n\t\tself.reloadUI()\n\n\t##--------------------------------------------------------------------------------------------\n\t## CONNECTIONS & INIT FUNCTIONS\n\t##--------------------------------------------------------------------------------------------\n\n\t# Connections\n\tdef setConnections(self):\n\t\t# Menu Bar\n\t\t\n\t\tself.mnu_close.triggered.connect(self.closeApp)\t\n\n\t\t# Set Project\n\t\tself.pushButton_browse.clicked.connect(lambda: self.setProject(state='browse'))\n\t\tself.comboBox_assetType.currentIndexChanged.connect(lambda: self.setProject(state='typeChanged'))\n\t\tself.comboBox_assetName.currentIndexChanged.connect(lambda: self.setProject(state='nameChanged'))\n\t\tself.pushButton_createSubFolder.clicked.connect(lambda: self.setProject(state='createSubFolderPushed'))\n\t\tself.pushButton_openFolder.clicked.connect(lambda: self.setProject(state='openFolder'))\n\t\tself.pushButton_loadModel.clicked.connect(lambda: self.loadFiles(fType='model'))\n\t\tself.pushButton_loadshading.clicked.connect(lambda: self.loadFiles(fType='shading'))\n\t\tself.pushButton_loadRig.clicked.connect(lambda: self.loadFiles(fType='rigging'))\n\t\tself.pushButton_loadSetup.clicked.connect(lambda: self.loadFiles(fType='loadSetup'))\n\n\t\t#Pointers\n\t\tself.pushButton_insertFaceMesh.clicked.connect(lambda: self.createPointers(button='faceMesh'))\n\t\tself.pushButton_insertAdditionaFaceMeshes.clicked.connect(lambda: self.createPointers(button='addFaceMesh'))\n\t\tself.pushButton_insertStickyMeshes.clicked.connect(lambda: self.createPointers(button='stickyMesh'))\n\t\tself.pushButton_insertSquashMeshes.clicked.connect(lambda: self.createPointers(button='squashMesh'))\n\t\tself.pushButton_insertSquashControls.clicked.connect(lambda: self.createPointers(button='squashControls'))\n\t\tself.pushButton_insertEyelashMeshes.clicked.connect(lambda: self.createPointers(button='eyeLashMesh'))\n\t\tself.pushButton_eyesMeshes.clicked.connect(lambda: self.createPointers(button='eyesMeshes'))\n\t\tself.pushButton_lowerTeeth.clicked.connect(lambda: self.createPointers(button='lowerTeeth'))\n\t\tself.pushButton_upperTeeth.clicked.connect(lambda: self.createPointers(button='upperTeeth'))\n\t\tself.pushButton_tongue.clicked.connect(lambda: self.createPointers(button='tongue'))\n\t\tself.pushButton_savePointerData.clicked.connect(lambda: self.createPointers(button='saveData'))\n\t\tself.pushButton_loadFromJson.clicked.connect(lambda: self.createPointers(button='loadData'))\n\t\tself.pushButton_createMaskScene.clicked.connect(self.createMask)\n\n\t\t# Setup\n\t\tself.pushButton_importBiped.clicked.connect(self.importBipedTemplate)\n\t\tself.pushButton_toggleMesh.clicked.connect(self.toggleMesh)\n\t\tself.pushButton_deleteMesh.clicked.connect(self.deleteMesh)\n\t\tself.pushButton_toggleMeshDisplay.clicked.connect(self.toggleMeshLayerDisplay)\n\t\tself.pushButton_generateModules.clicked.connect(self.modules)\n\t\tself.pushButton_deleteModule.clicked.connect(self.deleteMod)\n\t\tself.pushButton_mirrorParameters.clicked.connect(self.mirrorParameters)\n\t\t\n\t\tself.pushButton_loadData.clicked.connect(self.loadModData)\n\t\tself.pushButton_storeData.clicked.connect(self.storeData)\n\t\tself.pushButton_generateRig.clicked.connect(self.generateRig)\n\n\t\t\n\n\t\t#loMesh\n\t\tself.pushButton_separateMesh.clicked.connect(self.separateMesh)\n\t\tself.pushButton_mirrorSelected.clicked.connect(self.mirrorSelected)\n\n\n\t#Initialize UI\n\tdef reloadUI(self):\n\t\tself.initVars()\n\t\tprint \"jen Autorig started, version: \", self._version\n\n\n\tdef initVars(self):\n\t\tself._version = \"0.01\"\n\t\tself._appName = \"jenAutorig\"\n\n\n\t##--------------------------------------------------------------------------------------------\n\t## UI FUNCTIONS MENU & BUTTONS\n\t##--------------------------------------------------------------------------------------------    \n\n\tdef closeApp(self):\n\t\tself.close()\n\n\t\n\n\t##--------------------------------------------------------------------------------------------\n\t## JEN AUTORIG FUNCTIONS\n\t##--------------------------------------------------------------------------------------------    \n\t#---------------------------------------------------\n\t# SetProject #--------------------------------------\n\t#---------------------------------------------------\n\tdef setProject(self, state):\n\t\tif state=='browse':\n\t\t\tself.comboBox_assetType.setCurrentIndex(0)\n\t\t\tself.comboBox_assetName.clear()\n\t\t\tself.label_projectPath.setText('None')\n\t\t\tself.label_activeAsset.setText('None')\n\t\t\tpath=mc.fileDialog2( fm=3, okc='Pick', cc='Cancel', cap='Select your path', dir='G:')[0]\n\t\t\t\n\t\t\tself.lineEdit_Project.setText(str(path))\n\t\t\tcharacterPath= path+r'/ASSETS/CHARACTERS'\n\t\t\tpropsPath= path+ r'/ASSETS/PROPS'\n\t\t\tdirInChar = []\n\t\t\tassetInChar=[]\n\t\t\tfor each in os.listdir(characterPath):\n\t\t\t\tfp = os.path.join(characterPath, each)\n\t\t\t\tif os.path.isdir(fp):\t\t\t\t\t\n\t\t\t\t\tfp=fp.replace('\\\\','/')\n\t\t\t\t\tif \"$\" not in fp: \n\t\t\t\t\t\tdirInChar.append(fp)\n\t\t\t\t\n\t\t\t\t\tcd=fp.split('/')\n\t\t\t\t\tn=len(cd)\n\t\t\t\t\tn=cd[n-1]\n\t\t\t\t\tif n.startswith('$')==False:\n\t\t\t\t\t\tassetInChar.append(n)\t\n\n\t\t\tdirInProp = []\n\t\t\tassetInProp=[]\n\t\t\tfor each in os.listdir(propsPath):\n\t\t\t\tfp = os.path.join(propsPath, each)\n\t\t\t\tif os.path.isdir(fp):\n\t\t\t\t\tfp=fp.replace('\\\\','/')\n\t\t\t\t\tif \"$\" not in fp: \n\t\t\t\t\t\tdirInProp.append(fp)\n\t\t\t\t\n\t\t\t\t\tcd=fp.split('/')\n\t\t\t\t\tn=len(cd)\n\t\t\t\t\tn=cd[n-1]\n\t\t\t\t\tif n.startswith('$')==False:\n\t\t\t\t\t\tassetInProp.append(n)\n\n\t\t\tif mc.objExists('jenAutorig_projectPathNode')==True:\n\t\t\t\tmc.delete('jenAutorig_projectPathNode')\n\t\t\tmc.createNode('transform', n='jenAutorig_projectPathNode', ss=1)\n\t\t\tmc.setAttr('jenAutorig_projectPathNode.hiddenInOutliner', 1)\n\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='dirInChar', dt=\"string\")\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='assetInChar', dt=\"string\")\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='dirInProp', dt=\"string\")\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='assetInProp', dt=\"string\")\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='finalPath', dt=\"string\")\n\t\t\tmc.addAttr('jenAutorig_projectPathNode',longName='publishedPath', dt=\"string\")\n\n\t\t\tmc.setAttr('jenAutorig_projectPathNode.dirInChar', dirInChar, type='string')\n\t\t\tmc.setAttr('jenAutorig_projectPathNode.assetInChar', assetInChar, type='string')\n\t\t\tmc.setAttr('jenAutorig_projectPathNode.dirInProp', dirInProp, type='string')\n\t\t\tmc.setAttr('jenAutorig_projectPathNode.assetInProp', assetInProp, type='string')\n\n\t\tif state=='typeChanged':\n\t\t\tif self.comboBox_assetType.currentText()=='Character':\n\t\t\t\tcharPathData=eval(mc.getAttr('jenAutorig_projectPathNode.dirInChar'))\n\t\t\t\tcharAssetData=eval(mc.getAttr('jenAutorig_projectPathNode.assetInChar'))\t\t\t\t\n\t\t\t\tself.comboBox_assetName.clear()\n\t\t\t\tfor i in charAssetData:\n\t\t\t\t\tself.comboBox_assetName.addItem(i)\n\n\t\t\tif self.comboBox_assetType.currentText()=='Prop':\n\t\t\t\tpropPathData=eval(mc.getAttr('jenAutorig_projectPathNode.dirInProp'))\n\t\t\t\tpropAssetData=eval(mc.getAttr('jenAutorig_projectPathNode.assetInProp'))\t\t\t\t\n\t\t\t\tself.comboBox_assetName.clear()\n\t\t\t\tfor i in propAssetData:\n\t\t\t\t\tself.comboBox_assetName.addItem(i)\n\n\t\tif state=='nameChanged':\n\t\t\tif self.comboBox_assetType.currentText()=='Character':\n\t\t\t\tcharPathData=eval(mc.getAttr('jenAutorig_projectPathNode.dirInChar'))\n\t\t\t\tcharAssetData=eval(mc.getAttr('jenAutorig_projectPathNode.assetInChar'))\n\t\t\t\tcurrentIndex = str(self.comboBox_assetName.currentIndex())\t\t\t\t\t\t\n\t\t\t\tfor x in charPathData:\n\t\t\t\t\tindex=charPathData.index(x)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tif str(index) == currentIndex:\t\t\t\t\t\t\n\t\t\t\t\t\tself.label_projectPath.setText(x)\n\t\t\t\t\n\t\t\t\tfor x in charAssetData:\n\t\t\t\t\tindex=charAssetData.index(x)\n\t\t\t\t\t\n\t\t\t\t\tif str(index) == currentIndex:\t\t\t\t\t\t\n\t\t\t\t\t\tself.label_activeAsset.setText(x)\n\n\t\t\t\tfinalPath=self.label_projectPath.text()+r'/Rigging'\n\t\t\t\tpublishedPath=self.label_projectPath.text()+r'/Published'\n\n\n\t\t\t\tmc.setAttr('jenAutorig_projectPathNode.finalPath', finalPath, type='string')\n\t\t\t\tmc.setAttr('jenAutorig_projectPathNode.publishedPath', publishedPath, type='string')\n\t\t\t\t\n\t\t\tif self.comboBox_assetType.currentText()=='Prop':\n\t\t\t\tpropPathData=eval(mc.getAttr('jenAutorig_projectPathNode.dirInProp'))\n\t\t\t\tpropAssetData=eval(mc.getAttr('jenAutorig_projectPathNode.assetInProp'))\n\t\t\t\tcurrentIndex = str(self.comboBox_assetName.currentIndex())\n\t\t\t\tfor x in propPathData:\n\t\t\t\t\tindex=propPathData.index(x)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tif str(index) == currentIndex:\n\t\t\t\t\t\tself.label_projectPath.setText(x)\n\t\t\t\t\n\t\t\t\tfor x in propAssetData:\n\t\t\t\t\tindex=propAssetData.index(x)\n\t\t\t\t\t\n\t\t\t\t\tif str(index) == currentIndex:\n\t\t\t\t\t\tself.label_activeAsset.setText(x)\n\n\t\t\t\tfinalPath=self.label_projectPath.text()+r'/Rigging'\n\t\t\t\tpublishedPath=self.label_projectPath.text()+r'/Published'\n\n\t\t\t\t\n\t\t\t\tmc.setAttr('jenAutorig_projectPathNode.finalPath', finalPath, type='string')\n\t\t\t\tmc.setAttr('jenAutorig_projectPathNode.publishedPath', publishedPath, type='string')\n\t\t\t\n\t\t\t#JEN NODE to Json#--------------------------------------------------------------------------------------------    \t\n\t\t\tabsFunc.storeNodeAttrAsJson(finalPath, 'jenAutorig_projectPathNode')\n\n\t\t#Sub-Folders#--------------------------------------------------------------------------------------------    \t\n\t\tif state=='createSubFolderPushed':\n\t\t\tfinalPath=mc.getAttr('jenAutorig_projectPathNode.finalPath')\t\t\t\n\t\t\tif not os.path.exists(finalPath+r'/skin/skinWeights'):\n\t\t\t\tos.makedirs(finalPath+r'/skin/skinWeights')\n\t\t\tif not os.path.exists(finalPath+r'/mask/maskData'):\n\t\t\t\tos.makedirs(finalPath+r'/mask/maskData')\n\t\t\tif not os.path.exists(finalPath+r'/setup/setupData'):\n\t\t\t\tos.makedirs(finalPath+r'/setup/setupData')\t\t\t\n\t\t#Open Folder#--------------------------------------------------------------------------------------------    \t\n\t\tif state=='openFolder':\n\t\t\t#finalPath=mc.getAttr('jenAutorig_projectPathNode.finalPath')\n\t\t\tfinalPath=self.label_projectPath.text()\t\t\t\n\t\t\tos.startfile(finalPath)\n\n\t#Load Buttons#--------------------------------------------------------------------------------------------    \t\n\tdef loadFiles(self, fType):\n\t\tjsonPath=self.label_projectPath.text()+r'/Rigging/jenAutorig_projectPathNode.json'\n\t\tpublishedPath=absFunc.getSimpleJson(jsonPath, 'publishedPath')\n\t\triggingPath= absFunc.getSimpleJson(jsonPath, 'savedIn')\n\t\tsetupPath=riggingPath+r'/setup/'\t\t\n\t\tpublishFiles=[]\n\t\triggingFiles=[]\n\t\tsetupFiles=[]\n\t\tpubItems = os.listdir(publishedPath)\n\t\trigItems=os.listdir(riggingPath)\n\t\tif os.path.exists(setupPath):\n\t\t\tsetupItems=os.listdir(setupPath)\t\t\t\n\t\tif fType=='model':\n\n\t\t\tfor file in pubItems:\n\t\t\t\tif \".ma\" in file:\n\t\t\t\t\tpublishFiles.append(file)\n\n\t\t\tfor x in publishFiles:\n\t\t\t\tif x.startswith('MOD_')==True:\n\t\t\t\t\tfilePath=publishedPath+r'/'+x\t\t\t\t\t\n\t\t\t\t\tif os.path.exists(filePath):\n\t\t\t\t\t\tprint 'Opening:'+ filePath\n\t\t\t\t\t\tmc.file( filePath, o=True, force=True )\n\t\t\t\t\tif not mc.objExists('jenAutorig_projectPathNode'):\n\t\t\t\t\t\tprint 'jenNode not found, loading jen'\n\t\t\t\t\t\tabsFunc.loadJenNode(jsonPath)\n\t\t\t\telse:\n\t\t\t\t\tmc.warning('File does not exists')\n\n\n\t\tif fType=='shading':\n\n\t\t\tfor file in pubItems:\n\t\t\t\tif \".ma\" in file:\n\t\t\t\t\tpublishFiles.append(file)\n\n\t\t\tfor x in publishFiles:\n\t\t\t\tif x.startswith('SHD_')==True:\n\t\t\t\t\tfilePath=publishedPath+r'/'+x\n\t\t\t\t\t\n\t\t\t\t\tif os.path.exists(filePath):\n\t\t\t\t\t\tprint 'Opening:'+ filePath\n\t\t\t\t\t\tmc.file( filePath, o=True, force=True )\n\t\t\t\t\tif not mc.objExists('jenAutorig_projectPathNode'):\n\t\t\t\t\t\tprint \"jenNode not found, loading jen\"\n\t\t\t\t\t\tabsFunc.loadJenNode(jsonPath)\n\t\t\t\telse:\n\t\t\t\t\tmc.warning('File does not exists')\n\n\t\tif fType=='rigging':\n\n\t\t\tfor file in rigItems:\t\t\t\t\t\t\n\t\t\t\tif \".ma\" in file:\n\t\t\t\t\tif file.startswith('RIG_'+self.label_activeAsset.text()+'.')==True:\n\t\t\t\t\t\triggingFiles.append(file)\n\t\t\t\t\t\tprint file\n\n\t\t\tallArchives=[]\n\t\t\tfor x in riggingFiles:\t\t\t\t\n\t\t\t\tif x.startswith('RIG_'+self.label_activeAsset.text()+'.')==True:\n\t\t\t\t\tfilePath=riggingPath+r'/'+x\n\t\t\t\t\tallArchives.append(filePath)\n\t\t\tif len(allArchives)\t>0:\n\t\t\t\tif os.path.exists(allArchives[-1]):\n\t\t\t\t\tmc.file( allArchives[-1], o=True, force=True )\n\t\t\telse:\n\t\t\t\tmc.warning('File does not exists')\n\n\t\t\tif not mc.objExists('jenAutorig_projectPathNode'):\n\t\t\t\tprint \"jenNode not found, loading jenNode\"\n\t\t\t\tabsFunc.loadJenNode(jsonPath)\n\t\t\n\t\tif fType=='loadSetup':\n\t\t\t\n\t\t\tfor file in setupItems:\t\t\t\t\n\t\t\t\tif \".ma\" in file:\n\t\t\t\t\tif file.startswith('RIG_'+self.label_activeAsset.text()+'_setup.')==True:\n\t\t\t\t\t\tsetupFiles.append(file)\n\n\t\t\tallArchives=[]\n\t\t\tfor x in setupFiles:\t\t\t\t\n\t\t\t\tif x.startswith('RIG_'+self.label_activeAsset.text()+'_setup.')==True:\n\t\t\t\t\tfilePath=setupPath+r'/'+x\n\t\t\t\t\tallArchives.append(filePath)\t\t\t\n\t\t\tif len(allArchives)\t>0:\n\t\t\t\tif os.path.exists(allArchives[-1]):\n\t\t\t\t\tmc.file( allArchives[-1], o=True, force=True )\n\t\t\telse:\n\t\t\t\tmc.warning('File does not exists')\n\n\t\t\tif not mc.objExists('jenAutorig_projectPathNode'):\n\t\t\t\tprint \"jenNode not found, loading jenNode\"\n\t\t\t\tabsFunc.loadJenNode(jsonPath)\n\n\tdef createPointers(self, button):\n\t\n\t\tsel=mc.ls(sl=1)\n\t\ttexto = \"\"\t\t\n\t\tfor x in sel:\n\t\t\tasset=x.split('_')\n\t\t\tasset= asset[0]+'_'+asset[1]\n\t\t\tif x == sel[-1]:\n\t\t\t\ttexto = texto + asset\n\t\t\telse:\n\t\t\t\ttexto = texto + asset + \",\"\n\n\t\t\t\n\t\t\tif button == 'faceMesh':\n\t\t\t\tself.lineEdit_faceMesh.setText(texto)\n\t\t\t\tself.lineEdit_faceMesh.setToolTip(texto)\n\n\t\t\tif button == 'addFaceMesh':\n\t\t\t\tself.lineEdit_addFaceMesh.setText(texto)\n\t\t\t\tself.lineEdit_addFaceMesh.setToolTip(texto)\n\n\t\t\tif button == 'stickyMesh':\n\t\t\t\tself.lineEdit_stickyMesh.setText(texto)\n\t\t\t\tself.lineEdit_stickyMesh.setToolTip(texto)\n\n\t\t\tif button == 'squashMesh':\n\t\t\t\tself.lineEdit_squashMeshes.setText(texto)\n\t\t\t\tself.lineEdit_squashMeshes.setToolTip(texto)\n\n\t\t\tif button == 'squashControls':\n\t\t\t\tself.lineEdit_squashControls.setText(texto)\n\t\t\t\tself.lineEdit_squashControls.setToolTip(texto)\n\n\t\t\tif button == 'eyeLashMesh':\n\t\t\t\tself.lineEdit_eyelashMeshes.setText(texto)\n\t\t\t\tself.lineEdit_eyelashMeshes.setToolTip(texto)\n\n\t\t\tif button == 'eyesMeshes':\n\t\t\t\tself.lineEdit_eyesMeshes.setText(texto)\n\t\t\t\tself.lineEdit_eyesMeshes.setToolTip(texto)\n\t\t\t\n\n\t\t\tif button == 'lowerTeeth':\n\t\t\t\tself.lineEdit_lowerTeeth.setText(texto)\n\t\t\t\tself.lineEdit_lowerTeeth.setToolTip(texto)\n\n\n\t\t\tif button == 'upperTeeth':\n\t\t\t\tself.lineEdit_upperTeeth.setText(texto)\n\t\t\t\tself.lineEdit_upperTeeth.setToolTip(texto)\n\n\n\t\t\tif button == 'tongue':\n\t\t\t\tself.lineEdit_tongue.setText(texto)\n\t\t\t\tself.lineEdit_tongue.setToolTip(texto)\n\n\t\tif button== 'saveData':\n\t\t\tsetupDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData'\n\t\t\tpointersDict={\n\t\t\t\t\t\t'faceMesh':\tself.lineEdit_faceMesh.text(),\n\t\t\t\t\t\t'additionalFaceMesh':\tself.lineEdit_addFaceMesh.text(),\n\t\t\t\t\t\t'stickyMesh':\tself.lineEdit_stickyMesh.text(),\n\t\t\t\t\t\t'squashMeshes':\tself.lineEdit_squashMeshes.text(),\n\t\t\t\t\t\t'squashControls':\tself.lineEdit_squashControls.text(),\n\t\t\t\t\t\t'eyeLashMeshes':\tself.lineEdit_eyelashMeshes.text(),\n\t\t\t\t\t\t'eyesMeshes':\tself.lineEdit_eyesMeshes.text(),\n\t\t\t\t\t\t'lowerTeethMesh':\tself.lineEdit_lowerTeeth.text(),\n\t\t\t\t\t\t'upperTeethMesh':\tself.lineEdit_upperTeeth.text(),\n\t\t\t\t\t\t'tongue':\tself.lineEdit_tongue.text(),\n\t\t\t\t\t\t}\n\t\t\tjsonPath= setupDataPath\n\t\t\twith open(jsonPath + r'/' + 'pointersData'+ '.json', 'w') as outfile:\n\t\t\t\tjson.dump(pointersDict, outfile, sort_keys=1, indent=4)\n\t\t\tsys.stdout.write(\"Pointers Data Saved.\")\n\n\t\tif button== 'loadData':\n\t\t\t\n\t\t\tjsonPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/pointersData.json'\n\t\t\tif os.path.exists(jsonPath):\n\t\t\t\tself.lineEdit_faceMesh.setText(absFunc.getSimpleJson(jsonPath, \"faceMesh\"))\n\t\t\t\tself.lineEdit_addFaceMesh.setText(absFunc.getSimpleJson(jsonPath, \"additionalFaceMesh\"))\n\t\t\t\tself.lineEdit_stickyMesh.setText(absFunc.getSimpleJson(jsonPath, \"stickyMesh\"))\n\t\t\t\tself.lineEdit_squashMeshes.setText(absFunc.getSimpleJson(jsonPath, \"squashMeshes\"))\n\t\t\t\tself.lineEdit_squashControls.setText(absFunc.getSimpleJson(jsonPath, \"squashControls\"))\n\t\t\t\tself.lineEdit_eyelashMeshes.setText(absFunc.getSimpleJson(jsonPath, \"eyeLashMeshes\"))\n\t\t\t\tself.lineEdit_eyesMeshes.setText(absFunc.getSimpleJson(jsonPath, \"eyesMeshes\"))\n\t\t\t\tself.lineEdit_lowerTeeth.setText(absFunc.getSimpleJson(jsonPath, \"lowerTeethMesh\"))\n\t\t\t\tself.lineEdit_upperTeeth.setText(absFunc.getSimpleJson(jsonPath, \"upperTeethMesh\"))\n\t\t\t\tself.lineEdit_tongue.setText(absFunc.getSimpleJson(jsonPath, \"tongue\"))\n\t\t\t\tmc.warning(\"Data loaded.\")\n\t\t\telse:\n\t\t\t\tmc.warning(\"File doesn't exists.\")\n\n\tdef createMask(self):\n\t\tjsonPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/pointersData.json'\n\t\tsuffix='_01__MSH'\n\t\t_faceMeshLine=self.lineEdit_faceMesh.text()\n\t\t_addFaceMeshLine=self.lineEdit_addFaceMesh.text()\n\t\t_eyesMeshesLine=self.lineEdit_eyesMeshes.text()\n\t\t_lowerteethLine=self.lineEdit_lowerTeeth.text()\n\t\t_upperTeethLine=self.lineEdit_upperTeeth.text()\n\t\t_tongueLine=self.lineEdit_tongue.text()\n\n\n\t\tif os.path.exists(jsonPath):\n\t\t\t#----------------------------\n\t\t\t#Getting Face Mesh:\n\t\t\t#----------------------------\n\t\t\t\n\t\t\tfaceMesh=[]\n\t\t\taddFaceMeshC=[]\n\t\t\taddFaceMeshL=[]\n\t\t\taddFaceMeshR=[]\n\t\t\tabsFunc.getPointer(_faceMeshLine, False, faceMesh, False)\n\t\t\tabsFunc.getPointer(_addFaceMeshLine, addFaceMeshL, addFaceMeshC, addFaceMeshR)\n\t\t\tfaceMesh=''.join(map(str,faceMesh))\n\t\t\taddFaceMeshC=''.join(map(str,addFaceMeshC))\n\t\t\taddFaceMeshL=''.join(map(str,addFaceMeshL))\n\t\t\taddFaceMeshR=''.join(map(str,addFaceMeshR))\n\t\t\t\n\t\t\t#----------------------------\n\t\t\t#Getting Eyes Mesh:\n\t\t\t#----------------------------\n\t\t\tlEyeMesh=[]\n\t\t\trEyeMesh=[]\n\t\t\tcEyeMesh=[]\n\t\t\tabsFunc.getPointer(_eyesMeshesLine, lEyeMesh, cEyeMesh, rEyeMesh)\n\t\t\tlEyeMesh=''.join(map(str,lEyeMesh))\n\t\t\trEyeMesh=''.join(map(str,rEyeMesh))\n\t\t\tcEyeMesh=''.join(map(str,cEyeMesh))\n\n\t\t\t#----------------------------\n\t\t\t#Getting teeth and tongue Mesh:\n\t\t\t#----------------------------\n\t\t\tlowerTeethMesh=[]\n\t\t\tupperTeethMesh=[]\n\t\t\ttongueMesh=[]\n\t\t\tabsFunc.getPointer(_lowerteethLine, False, lowerTeethMesh, False)\n\t\t\tabsFunc.getPointer(_upperTeethLine, False, upperTeethMesh, False)\n\t\t\tabsFunc.getPointer(_tongueLine, False, tongueMesh, False)\n\t\t\tlowerTeethMesh=''.join(map(str,lowerTeethMesh))\n\t\t\tupperTeethMesh=''.join(map(str,upperTeethMesh))\n\t\t\ttongueMesh=''.join(map(str,tongueMesh))\n\n\t\t\t\n\t\t\tpreBSList = ['C_'+faceMesh+'_mouthForwardBSMesh', 'C_'+faceMesh+'_mouthBackwardBSMesh', 'C_'+faceMesh+'_mouthNorthBSMesh', 'C_'+faceMesh+'_mouthSouthBSMesh', 'C_'+faceMesh+'_mouthEastBSMesh', 'C_'+faceMesh+'_mouthWestBSMesh', 'C_'+faceMesh+'_mouthTwistClockwiseBSMesh', 'C_'+faceMesh+'_mouthTwistAnticlockwiseBSMesh', 'C_'+lowerTeethMesh+'_twistClockwiseBSMesh', 'C_'+lowerTeethMesh+'_twistAnticlockwiseBSMesh', 'C_'+upperTeethMesh+'_twistClockwiseBSMesh', 'C_'+upperTeethMesh+'_twistAnticlockwiseBSMesh', 'C_'+tongueMesh+'_twistClockwiseBSMesh', 'C_'+tongueMesh+'_twistAnticlockwiseBSMesh', 'C_'+faceMesh+'_bendEastBSMesh', 'C_'+faceMesh+'_bendWestBSMesh', 'C_'+faceMesh+'_squashBSMesh', 'C_'+faceMesh+'_stretchBSMesh', 'L_'+faceMesh+'_cheekInBSMesh', 'R_'+faceMesh+'_cheekInBSMesh', 'L_'+faceMesh+'_cheekOutBSMesh', 'R_'+faceMesh+'_cheekOutBSMesh', 'L_'+faceMesh+'_cheekSquintNorthBSMesh', 'R_'+faceMesh+'_cheekSquintNorthBSMesh', 'L_'+faceMesh+'_eyebrowEastBSMesh', 'R_'+faceMesh+'_eyebrowEastBSMesh', 'L_'+faceMesh+'_eyebrowInNorthBSMesh', 'R_'+faceMesh+'_eyebrowInNorthBSMesh', 'L_'+faceMesh+'_eyebrowInSouthBSMesh', 'R_'+faceMesh+'_eyebrowInSouthBSMesh', 'L_'+faceMesh+'_eyebrowMidNorthBSMesh', 'R_'+faceMesh+'_eyebrowMidNorthBSMesh', 'L_'+faceMesh+'_eyebrowMidSouthBSMesh', 'R_'+faceMesh+'_eyebrowMidSouthBSMesh', 'L_'+faceMesh+'_eyebrowOutNorthBSMesh', 'R_'+faceMesh+'_eyebrowOutNorthBSMesh', 'L_'+faceMesh+'_eyebrowOutSouthBSMesh', 'R_'+faceMesh+'_eyebrowOutSouthBSMesh', 'L_'+faceMesh+'_eyebrowWestBSMesh', 'R_'+faceMesh+'_eyebrowWestBSMesh', 'L_'+faceMesh+'_lipCornerFrownBSMesh', 'R_'+faceMesh+'_lipCornerFrownBSMesh', 'L_'+faceMesh+'_lipCornerNarrowBSMesh', 'R_'+faceMesh+'_lipCornerNarrowBSMesh', 'L_'+faceMesh+'_lipCornerSmileBSMesh', 'R_'+faceMesh+'_lipCornerSmileBSMesh', 'L_'+faceMesh+'_lipCornerWideBSMesh', 'R_'+faceMesh+'_lipCornerWideBSMesh', 'L_'+faceMesh+'_lowerLipRollInBSMesh', 'R_'+faceMesh+'_lowerLipRollInBSMesh', 'L_'+faceMesh+'_lowerLipRollOutBSMesh', 'R_'+faceMesh+'_lowerLipRollOutBSMesh', 'L_'+faceMesh+'_noseSneerNorthBSMesh', 'R_'+faceMesh+'_noseSneerNorthBSMesh', 'L_'+faceMesh+'_upperLipRollInBSMesh', 'R_'+faceMesh+'_upperLipRollInBSMesh', 'L_'+faceMesh+'_upperLipRollOutBSMesh', 'R_'+faceMesh+'_upperLipRollOutBSMesh', lEyeMesh+'_pupilCloseBSMesh', rEyeMesh+'_pupilCloseBSMesh', lEyeMesh+'_pupilOpenBSMesh', rEyeMesh+'_pupilOpenBSMesh', lEyeMesh+'_irisCloseBSMesh', rEyeMesh+'_irisCloseBSMesh', lEyeMesh+'_irisOpenBSMesh', rEyeMesh+'_irisOpenBSMesh']\n\t\t\tlipBlendshapes = ['C_'+faceMesh+'_lowerLipNorthBSMesh', 'L_'+faceMesh+'_lowerLipNorthBSMesh', 'R_'+faceMesh+'_lowerLipNorthBSMesh', 'C_'+faceMesh+'_lowerLipSouthBSMesh', 'L_'+faceMesh+'_lowerLipSouthBSMesh', 'R_'+faceMesh+'_lowerLipSouthBSMesh', 'C_'+faceMesh+'_upperLipNorthBSMesh', 'L_'+faceMesh+'_upperLipNorthBSMesh', 'R_'+faceMesh+'_upperLipNorthBSMesh', 'C_'+faceMesh+'_upperLipSouthBSMesh', 'L_'+faceMesh+'_upperLipSouthBSMesh', 'R_'+faceMesh+'_upperLipSouthBSMesh']\n\t\t\tjawBlendshapes1 = ['C_'+faceMesh+'_jawNorthBSMesh', 'C_'+faceMesh+'_jawSouthBSMesh', 'C_'+faceMesh+'_jawEastBSMesh', 'C_'+faceMesh+'_jawWestBSMesh', 'C_'+faceMesh+'_jawBackwardBSMesh', 'C_'+faceMesh+'_jawForwardBSMesh', 'C_'+lowerTeethMesh+'_jawSouthBSMesh', 'C_'+lowerTeethMesh+'_jawEastBSMesh', 'C_'+lowerTeethMesh+'_jawWestBSMesh', 'C_'+lowerTeethMesh+'_jawBackwardBSMesh', 'C_'+lowerTeethMesh+'_jawForwardBSMesh', 'C_'+tongueMesh+'_jawSouthBSMesh', 'C_'+tongueMesh+'_jawEastBSMesh', 'C_'+tongueMesh+'_jawWestBSMesh', 'C_'+tongueMesh+'_jawBackwardBSMesh', 'C_'+tongueMesh+'_jawForwardBSMesh', 'C_'+tongueMesh+'_tongueTipBackwardBSMesh', 'C_'+tongueMesh+'_tongueTipForwardBSMesh', 'C_'+tongueMesh+'_tongueTipNorthBSMesh', 'C_'+tongueMesh+'_tongueTipSouthBSMesh', 'C_'+tongueMesh+'_tongueTipWestBSMesh', 'C_'+tongueMesh+'_tongueTipEastBSMesh', 'C_'+tongueMesh+'_upBSMesh', 'C_'+tongueMesh+'_downBSMesh']\n\t\t\t\n\t\t\teyelidBlendshapes1 = ['L_'+faceMesh+'_upperLidInNorthBSMesh', 'R_'+faceMesh+'_upperLidInNorthBSMesh', 'L_'+faceMesh+'_upperLidMidNorthBSMesh', 'R_'+faceMesh+'_upperLidMidNorthBSMesh', 'L_'+faceMesh+'_upperLidOutNorthBSMesh', 'R_'+faceMesh+'_upperLidOutNorthBSMesh', 'L_'+faceMesh+'_upperLidInSouthBSMesh', 'R_'+faceMesh+'_upperLidInSouthBSMesh', 'L_'+faceMesh+'_upperLidMidSouthBSMesh', 'R_'+faceMesh+'_upperLidMidSouthBSMesh', 'L_'+faceMesh+'_upperLidOutSouthBSMesh', 'R_'+faceMesh+'_upperLidOutSouthBSMesh', 'L_'+faceMesh+'_lowerLidInNorthBSMesh', 'R_'+faceMesh+'_lowerLidInNorthBSMesh', 'L_'+faceMesh+'_lowerLidMidNorthBSMesh', 'R_'+faceMesh+'_lowerLidMidNorthBSMesh', 'L_'+faceMesh+'_lowerLidOutNorthBSMesh', 'R_'+faceMesh+'_lowerLidOutNorthBSMesh', 'L_'+faceMesh+'_lowerLidInSouthBSMesh', 'R_'+faceMesh+'_lowerLidInSouthBSMesh', 'L_'+faceMesh+'_lowerLidMidSouthBSMesh', 'R_'+faceMesh+'_lowerLidMidSouthBSMesh', 'L_'+faceMesh+'_lowerLidOutSouthBSMesh', 'R_'+faceMesh+'_lowerLidOutSouthBSMesh']\n\t\t\teyelidBlendshapes2 = ['L_'+faceMesh+'_upperLidNorthBSMesh', 'R_'+faceMesh+'_upperLidNorthBSMesh', 'L_'+faceMesh+'_upperLidSouthBSMesh', 'R_'+faceMesh+'_upperLidSouthBSMesh', 'L_'+faceMesh+'_lowerLidNorthBSMesh', 'R_'+faceMesh+'_lowerLidNorthBSMesh', 'L_'+faceMesh+'_lowerLidSouthBSMesh', 'R_'+faceMesh+'_lowerLidSouthBSMesh']\n\t\telse:\n\t\t\tmc.warning('No Data.')\n\t\t\n\t#---------------------------------------------------\n\t# Setup #--------------------------------------\n\t#---------------------------------------------------\n\tdef toggleMesh(self):\n\t\tchar = self.label_activeAsset.text()\n\t\tjsonPath=self.label_projectPath.text()+r'/Rigging/jenAutorig_projectPathNode.json'\t\t\n\t\tpublishedPath=absFunc.getSimpleJson(jsonPath, 'publishedPath')\n\t\tpublishFiles=[]\n\t\tpubItems = os.listdir(publishedPath)\n\t\tif char == 'None':\n\t\t\tmc.warning('No character is active.')\n\t\t\treturn\n\n\t\tif mc.objExists('mesh_layer') == False:\n\t\t\tmc.createDisplayLayer(n='mesh_layer', e=1)\n\t\t\tfor file in pubItems:\n\t\t\t\tif \".ma\" in file:\n\t\t\t\t\tpublishFiles.append(file)\n\n\t\t\tfor x in publishFiles:\n\t\t\t\tif x.startswith('MOD_')==True:\n\t\t\t\t\tfilePath=publishedPath+r'/'+x\t\t\t\t\t\n\t\t\t\t\tif os.path.exists(filePath):\t\t\t\t\t\n\t\t\t\t\t\tmc.file(filePath, i=True, namespace='tempModel')\n\n\t\t\tfor e in mc.ls('tempModel:*', type='transform'):\n\t\t\t\tmc.editDisplayLayerMembers('mesh_layer', e)\n\n\t\telif mc.objExists('mesh_layer') == True:\n\t\t\tif mc.getAttr('mesh_layer.visibility') == 1:\n\t\t\t\tmc.setAttr('mesh_layer.visibility', 0)\n\t\t\telse:\n\t\t\t\tmc.setAttr('mesh_layer.visibility', 1)\n\n\tdef deleteMesh(self):\n\t\tchar = self.label_activeAsset.text()\n\n\t\tif char == 'None':\n\t\t\tmc.warning('No character is active.')\n\t\t\treturn\n\n\t\ttry:\n\t\t\tmc.delete('mesh_layer')\n\t\texcept: 0\n\n\t\tabsFunc.removeMesh()\t\n\n\tdef toggleMeshLayerDisplay(self):\n\t\tif mc.objExists('mesh_layer') == True:\n\t\t\tif mc.getAttr('mesh_layer.displayType') == 0:\n\t\t\t\tmc.setAttr('mesh_layer.displayType', 1)\t\t\t\t\n\n\t\t\telif mc.getAttr('mesh_layer.displayType') == 1:\n\t\t\t\tmc.setAttr('mesh_layer.displayType', 2)\t\t\t\t\n\n\t\t\telif mc.getAttr('mesh_layer.displayType') == 2:\n\t\t\t\tmc.setAttr('mesh_layer.displayType', 0)\n\n\tdef importBipedTemplate(self):\n\t\tbipedPath=app_folder_win + \"/\" + \"libs\" + \"/\" + \"jen_bipedTemplate.ma\"\n\t\tmc.file(bipedPath, i=1 )\n\n\tdef modules(self):\n\n\n\t\t#Creating a Root Control###############################################################################\n\t\tif mc.objExists('C_root_01_CTRL') ==False:\t\n\t\t\tgrp=mc.createNode('transform', n='rig')\n\t\t\troot=mc.circle(n='C_root_01_CTRL', r=50, nr=(0,1,0))[0]\n\t\t\tmain=mc.circle(n='C_main_01_CTRL', r=40, nr=(0,1,0))[0]\n\t\t\tabsFunc.setCurveColor(root, 'black')\n\t\t\tabsFunc.setCurveColor(main, 'gray')\n\n\t\t\tmc.parent(main, root)\t\t\n\t\t\tmc.addAttr('C_root_01_CTRL', ln='pointData', dt='string')\n\t\t\tdftGrp=mc.createNode('transform', n='dft_GRP')\n\t\t\tjointsGrp=mc.createNode('transform', n='joints_group')\n\t\t\tcontrolsGrp=mc.createNode('transform', n='controls_group')\n\t\t\tmc.parent(dftGrp, grp)\n\t\t\tmc.parent(jointsGrp, grp)\n\t\t\tmc.parent(controlsGrp, grp)\n\t\t\tmc.parent(root, controlsGrp)\n\n\n\t\t#Creating Modules#####################################################################################\n\t\tpoints = mc.ls('*_point')\n\t\tfor i in points:\t\t\t\n\t\t\tif mc.listRelatives(i,p=1)[0]=='Points':\t\t\t\t\n\t\t\t\tfirstPoint=i\n\t\t\t\tbreak\t\t\t\n\t\t \n\t\tmc.select(firstPoint, hi=1)\n\t\thi=mc.ls(sl=1)\n\t\tfor rounded in hi:\n\t\t\ttempcoord=mc.xform(rounded, q=1, t=1, os=1)\t\t\t\n\n\t\t\tposX=mc.getAttr(rounded+'.tx')\n\t\t\tposY=mc.getAttr(rounded+'.ty')\n\t\t\tposZ=mc.getAttr(rounded+'.tz')\t\t\t\n\t\t\tmc.setAttr(rounded+'.tx', round(posX,4))\n\t\t\tmc.setAttr(rounded+'.ty', round(posY,4))\n\t\t\tmc.setAttr(rounded+'.tz', round(posZ,4))\n\t\t\ttempcoord=mc.xform(rounded, q=1, t=1, os=1)\t\t\n\n\t\t# Progress Bar########################################################################################\n\t\t'''\n\t\tpbWin = mc.window(title='Modules...', mxb=0, tlb=1)\n\t\tmc.columnLayout(adj=1)\n\t\tmc.text(label='Generate modules...')\n\t\tpb = mc.progressBar(maxValue=len(points)-1, width=300, height=22)\n\t\tpbText = mc.text(label='')\n\t\tmc.showWindow(pbWin)\n\t\t'''\n\t\t#GLobalScaleContrlProxyNode#######################################################################\n\t\tif mc.objExists('C_proxyControlGlobalScale')==True:\n\t\t\tpcgs='C_proxyControlGlobalScale'\t\t\t\n\t\telse:\n\t\t\tpcgs=mc.createNode('transform', n='C_proxyControlGlobalScale')\t\t\t\n\t\t\tmc.parent(pcgs, 'dft_GRP')\n\n\t\t#Modules##########################################################################################\n\t\tif mc.objExists('modules_group') ==False:\n\t\t\tmc.createNode('transform',n='modules_group')\n\n\t\tfor joint in points:\n\t\t\t\n\t\t\tmod = joint.replace('_point','')\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Module: '+mod,2000)\t\t\t\n\t\t\tmc.select(cl=1)\n\t\t\tjointPos=mc.xform(joint,q=1, t=1, ws=1)\n\t\t\tjointOrient=mc.xform(joint,q=1, ro=1, ws=1)\n\n\t\t\tindex = points.index(joint)\n\n\n\t\t\tparent=mc.listRelatives(joint, p=1)\n\t\t\tchild=mc.listRelatives(joint, c=1)\n\t\t\t\n\t\t\t# Edit Progres Bar################################\n\t\t\t'''\n\t\t\tmc.progressBar(pb, edit=True, step=1)\n\t\t\tmc.text(pbText, edit=1, label=mod)\n\t\t\t'''\n\n\t\t\tif mc.objExists(mod+'_module') ==False:\n\n\t\t\t\tsphere = mc.polySphere(n=mod+'_module',sa=8, sh=8, r=0.5 )[0]\n\t\t\t\tmel.eval('polyColorPerVertex -r 1 -g 1 -b 0 -a 0.4 -cdo;')\n\t\t\t\tgrp= mc.createNode('transform',n=mod+'_moduleGrp' )\n\t\t\t\tmc.parent(grp, 'modules_group')\n\t\t\t\tsphereGrp=mc.createNode('transform', n=mod+'_sphereGrp')\n\t\t\t\tmc.parent(sphere, sphereGrp)\n\t\t\t\t\n\t\t\t\tfor x in child:\n\t\t\t\t\tif x.endswith('endpoint')==True:\n\t\t\t\t\t\tchild =x\n\t\t\t\t\n\t\t\t\tmc.pointConstraint(joint, child, sphereGrp, mo=0)\n\t\t\t\tmc.parent(sphereGrp, grp)\n\t\t\t\thideAttr=mc.listAttr(sphere, k=1)\n\t\t\t\tmc.delete(sphere, ch=1)\n\t\t\t\tfor x in hideAttr:\n\t\t\t\t\tmc.setAttr(sphere+'.'+x, k=0,l=1)\n\n\t\t\t\tmc.addAttr(sphere, ln='moduleType', at='enum', en='flow:ikStart:ikEnd:foot:hand:face:hip:ikMono:fk', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='controlType', at='enum', en='box:circle:square', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='showOrientation', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='fkTranslate', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='ribbon', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='twistJoints', at='long', min=1, max=10, dv=6,  k=1)\n\t\t\t\tmc.addAttr(sphere, ln='sleeve', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='customPart', at='enum', en='no:yes', k=1)\t\t\t\t\n\t\t\t\tmc.addAttr(sphere, ln='dynamicStart', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='dynamicEnd', at='enum', en='no:yes', k=1)\n\t\t\t\tmc.addAttr(sphere, ln='rotateOffset', at='float', dv=0,  k=1)\n\t\t\t\tmc.addAttr(sphere, ln='sizeA', at='float', min=0.01, dv=1,  k=1)\n\t\t\t\tmc.addAttr(sphere, ln='sizeB', at='float', min=0.01, dv=1,  k=1)\n\t\t\t\tmc.addAttr(sphere, ln='width', at='float', min=0.01, dv=1,  k=1)\n\t\t\t\tmc.addAttr(sphere, ln='depth', at='float', min=0.01, dv=1,  k=1)\n\t\t\t\n\t\t\t\n\t\t\t#Create orientMeshes########################################################################################\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\tmc.polyTorus(r=1.2, sr=0.1, sx=12, sy=6, cuv=0, ax=(0,1,0), n='_orientMesh_')\n\t\t\t\tmc.polyColorPerVertex(r=0, b=0, g=0.6078, a=1, cdo=1)\n\n\t\t\t\tmc.polyTorus(r=1.2, sr=0.1, sx=12, sy=6, cuv=0, ax=(1,0,0), n='_orientMesh_')\n\t\t\t\tmc.polyColorPerVertex(r=0.667, b=0, g=0, a=1, cdo=1)\n\n\t\t\t\tmc.polyTorus(r=1.2, sr=0.1, sx=12, sy=6, cuv=0, ax=(0,0,1), n='_orientMesh_')\n\t\t\t\tmc.polyColorPerVertex(r=0, b=0.667, g=0, a=1, cdo=1)\n\n\t\t\t\tmc.polyCylinder(r=0.05, h=1.2, sx=6, sy=1, sz=0, ax=(0,1,0), n='_orientMesh_')\n\t\t\t\tmc.move(0,0.58,0)\n\t\t\t\tmc.polyColorPerVertex(r=0, b=0, g=0.6078, a=1, cdo=1)\n\n\t\t\t\tmc.polyCylinder(r=0.05, h=1.2, sx=6, sy=1, sz=0, ax=(1,0,0), n='_orientMesh_')\n\t\t\t\tmc.move(0.58,0,0)\n\t\t\t\tmc.polyColorPerVertex(r=0.667, b=0, g=0, a=1, cdo=1)\n\n\t\t\t\tmc.polyCylinder(r=0.05, h=1.2, sx=6, sy=1, sz=0, ax=(0,0,1), n='_orientMesh_')\n\t\t\t\tmc.move(0,0,0.58)\n\t\t\t\tmc.polyColorPerVertex(r=0, b=0.667, g=0, a=1, cdo=1)\n\t\t\t\t#orient sphereOrientMeshes############################################################################\n\t\t\t\tchild= mc.listRelatives(joint, c=1)\n\t\t\t\tmc.select(mc.ls('_orientMesh*'))\n\t\t\t\torientMesh=mc.polyUnite(ch=0, n=mod +'_orientMesh')\n\t\t\t\torientGrp=mc.createNode('transform', n = mod +'_orientGrp')\n\t\t\t\tmc.parent(orientMesh, orientGrp)\n\t\t\t\tmc.parent(orientGrp,mod+'_moduleGrp')\n\t\t\t\tmc.pointConstraint(joint, orientGrp, mo=0)\n\n\t\t\t\tmc.xform(orientGrp, ro=jointOrient, ws=1)\n\t\t\t\t'''\n\t\t\t\tif joint.startswith('R_')==True:\n\t\t\t\t\taim=mc.aimConstraint(child, orientGrp, mo=0, wut='objectrotation', wuo=joint, aim=(1,0,0),wu=(0,0,1), u=(0,0,1))\n\t\t\t\t\n\t\t\t\telse:\n\t\t\t\t\taim=mc.aimConstraint(child, orientGrp, mo=0, wut='objectrotation', wuo=joint, aim=(0,0,0),wu=(0,0,1), u=(0,0,-1))\n\t\t\t\t'''\n\t\t\t\tmc.connectAttr(mod+'_module.showOrientation', mod+'_orientGrp.v' )\n\t\t\t\tmc.select(cl=1)\n\t\t\t\n\n\t\t\t#HIP###################################\n\n\t\t\t\thipCircle=mc.circle(n=joint.replace('_point', '_hipModHipControlProxy'), r=11, nr=(0,1,0))\n\t\t\t\thipSquare=mel.eval('curve -d 1 -p -12 0 -12 -p -12 0 12 -p 12 0 12 -p 12 0 -12 -p -12 0 -12 -k 0 -k 1 -k 2 -k 3 -k 4 ;')\n\t\t\t\thipSquare=mc.rename(hipSquare, joint.replace('_point', '_hipModBodyControlProxy'))\n\n\t\t\t\thipProxyGrp=mc.createNode('transform', n=joint.replace('_point', '_hipModTextGrp'))\n\t\t\t\tmc.parent(hipCircle, hipProxyGrp)\n\t\t\t\tmc.parent(hipSquare, hipProxyGrp)\n\t\t\t\tmc.parent(hipProxyGrp, mod+'_moduleGrp')\n\t\t\t\tmc.pointConstraint(joint, hipProxyGrp, mo=0)\n\t\t\t\tmc.delete(hipSquare, hipCircle, ch=1)\n\n\t\t\t\thipProxyCond=mc.createNode('condition', n=joint.replace('_point', '_hipModCond'))\n\t\t\t\tmc.connectAttr(mod+'_module.moduleType', hipProxyCond+'.firstTerm')\n\t\t\t\tmc.setAttr(hipProxyCond+'.secondTerm', 6)\n\t\t\t\tmc.setAttr(hipProxyCond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(hipProxyCond+'.colorIfFalseR', 0)\n\n\t\t\t\tmc.connectAttr(hipProxyCond+'.outColorR', hipProxyGrp+'.v')\n\n\n\n\t\t\t#FOOT########################################################################\n\t\t\t\tfootLocGrp=mc.createNode('transform', n=joint.replace('_point', '_proxyFootGRP'))\n\t\t\t\theelLoc=mc.spaceLocator(n=joint.replace('_point', '_03ProxyLoc'))\n\t\t\t\ttipLoc=mc.spaceLocator(n=joint.replace('_point', '_04ProxyLoc'))\n\t\t\t\tbankExtLoc=mc.spaceLocator(n=joint.replace('_point', '_01ProxyLoc'))\n\t\t\t\tbankIntLoc=mc.spaceLocator(n=joint.replace('_point', '_02ProxyLoc'))\n\t\t\t\tfootLoc=mc.spaceLocator(n=joint.replace('_point', '_05ProxyLoc'))\t\t\t\t\n\t\t\t\tmc.xform(heelLoc, t=(0,0,-3))\n\t\t\t\tmc.xform(tipLoc, t=(0,0,3))\n\t\t\t\tmc.xform(footLoc, t=(0,0,1.5))\n\t\t\t\tmc.xform(bankExtLoc, t=(3,0,0))\n\t\t\t\tmc.xform(bankIntLoc, t=(-3,0,0))\n\n\n\t\t\t\tmc.parent(heelLoc, tipLoc, bankIntLoc, bankExtLoc, footLoc, footLocGrp)\n\t\t\t\tmc.pointConstraint(joint, footLocGrp, mo=0)\n\t\t\t\tmc.parent(footLocGrp, mod+'_moduleGrp')\n\n\t\t\t\tfootLocCond=mc.createNode('condition', n=joint.replace('_point', '_footLocGRPCond'))\n\t\t\t\tmc.connectAttr(mod+'_module.moduleType', footLocCond+'.firstTerm')\n\t\t\t\tmc.setAttr(footLocCond+'.secondTerm', 3)\n\t\t\t\tmc.setAttr(footLocCond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(footLocCond+'.colorIfFalseR', 0)\n\t\t\t\tmc.connectAttr(footLocCond+'.outColorR', footLocGrp+'.v')\n\n\t\t\t\tfootProxyCTRL=mel.eval('curve -d 1 -p -6 0 13 -p 6 0 13 -p 6 0 -15 -p -6 0 -15 -p -6 0 13 -k 0 -k 1 -k 2 -k 3 -k 4 ;')\n\t\t\t\tfootProxyCTRL=mc.rename(joint.replace('_point', '_footControlProxy'))\n\t\t\t\tfootProxyGrp=mc.createNode('transform',n=joint.replace('_point', 'Grp'), p=mod+'_moduleGrp')\n\t\t\t\tmc.parent(footProxyCTRL, footProxyGrp)\n\t\t\t\tmc.pointConstraint(joint, footProxyGrp, mo=0)\n\n\t\t\t\tfootProxyCTRLCond=mc.createNode('condition', n=joint.replace('_point', '_footLocGRPCond'))\n\t\t\t\tmc.connectAttr(mod+'_module.moduleType', footProxyCTRLCond+'.firstTerm')\n\t\t\t\tmc.setAttr(footProxyCTRLCond+'.secondTerm', 3)\n\t\t\t\tmc.setAttr(footProxyCTRLCond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(footProxyCTRLCond+'.colorIfFalseR', 0)\n\t\t\t\tmc.connectAttr(footProxyCTRLCond+'.outColorR', footProxyGrp+'.v')\n\n\t\t\t#ikControlsProxy###################################################################################\n\t\t\t\t#ikHandleProxy#####\n\t\t\t\tif mc.listRelatives(joint, p=1) != None:\n\t\t\t\t\t\n\t\t\t\t\tikCircleProxy=mc.circle(n= mod+'_ikControlProxy', nr=(1,0,0), r=5)[0]\n\t\t\t\t\t\n\t\t\t\t\tmc.delete(ch=1)\n\n\t\t\t\t\tmc.addAttr(ikCircleProxy, ln='ikType', at='enum', en='ikHandle:ikSpline', k=1)\n\t\t\t\t\tmc.addAttr(ikCircleProxy, ln='ikSplineControls', at='long', min=1, dv=1,  k=1)\n\t\t\t\t\tmc.addAttr(ikCircleProxy, ln='fkSplineControls', at='long', min=1, dv=2,  k=1)\n\t\t\t\t\tmc.addAttr(ikCircleProxy, ln='ikSplineTwistAxis', at='enum', en='x:y:z', k=1)\n\t\t\t\t\tmc.addAttr(ikCircleProxy, ln='spaceSelect', at='enum', en='no:yes', k=1)\n\n\n\t\t\t\t\tikCircleProxyGrp=mc.createNode('transform', n= mod+'_ikControlProxyGrp')\n\t\t\t\t\tmc.parent(ikCircleProxy, ikCircleProxyGrp)\n\t\t\t\t\tmc.parent(ikCircleProxyGrp, mod+'_moduleGrp')\n\t\t\t\t\tmc.pointConstraint(child[0], ikCircleProxyGrp, mo=0)\n\t\t\t\t\tmc.orientConstraint(joint, ikCircleProxyGrp, mo=0)\n\n\t\t\t\t\tcond=mc.createNode('condition', n=mod+'_ikControlProxyCondition')\n\n\t\t\t\t\tmc.connectAttr(mod + '_module.moduleType', cond+'.firstTerm')\n\t\t\t\t\tmc.setAttr(cond+'.secondTerm', 2)\n\t\t\t\t\tmc.setAttr(cond+'.colorIfTrueR', 1)\n\t\t\t\t\tmc.setAttr(cond+'.colorIfFalseR', 0)\n\t\t\t\t\tmc.connectAttr(cond+'.outColorR', ikCircleProxyGrp + '.v')\n\t\t\t\t\t\n\t\t\t\t#Proxy FK Control###########################################################################\n\t\t\t\t\t\n\t\t\t\t\tmodCubeControl=mel.eval('curve -d 1 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 ;')\n\t\t\t\t\tmodCircleControl=mc.circle(n=mod+'_fKCircleControlProxy', r=1, nr=(1,0,0))[0]\n\t\t\t\t\tmodSquareControl=mel.eval('curve -d 1 -p 0 0.8 0.8 -p 0 0.8 -0.8 -p 0 -0.8 -0.8 -p 0 -0.8 0.8 -p 0 0.8 0.8 -k 0 -k 1 -k 2 -k 3 -k 4 ;')\n\t\t\t\t\tmodSquareControl=mc.rename(modSquareControl, mod+'_fKSquareControlProxy')\n\t\t\t\t\tmodCubeControl=mc.rename(modCubeControl, mod+'_fKCubeControlProxy')\n\t\t\t\t\t\n\t\t\t\t\tcircleList=mc.ls(modCircleControl)\n\t\t\t\t\tcubeList=mc.ls(modCubeControl)\n\t\t\t\t\tsquareList=mc.ls(modSquareControl)\n\t\t\t\t\tproxyList=cubeList+circleList+squareList\n\t\t\t\t\t\n\t\t\t\t\tfor x in proxyList:\n\t\t\t\t\t\tindex= proxyList.index(x)\n\t\t\t\t\t\tcontrolCond=mc.createNode('condition', n=mod+'_fkControlTypeCondition')\n\t\t\t\t\t\tmc.setAttr(controlCond+'.secondTerm', (index))\n\t\t\t\t\t\tmc.setAttr(controlCond+'.operation', 0)\n\t\t\t\t\t\tmc.setAttr(controlCond+'.colorIfTrueR', 1)\n\t\t\t\t\t\tmc.setAttr(controlCond+'.colorIfFalseR', 0)\n\t\t\t\t\t\tmc.connectAttr(mod+'_module.controlType', controlCond+'.firstTerm')\n\t\t\t\t\t\tmc.connectAttr(controlCond+'.outColorR', x+'.v')\n\t\t\t\t\t\tmc.setAttr(x + '.overrideEnabled', 1)\n\t\t\t\t\t\tmc.setAttr(x + '.overrideColor', 1)\n\t\t\t\t\t\n\t\t\t\t\tmc.xform(modCubeControl,piv=(-0.5,0,0))\n\t\t\t\t\tmc.xform(modCubeControl,t=(0.5,0,0))\n\t\t\t\t\tmc.makeIdentity(modCubeControl, a=1)\n\t\t\t\t\tmodCubeControlGrp=mc.createNode('transform',n= mod+'_fKControlProxyGrp')\n\t\t\t\t\tmodCubeControlZtr=mc.createNode('transform',n= mod+'_fKControlProxyZtr')\n\t\t\t\t\tdistGrp=mc.createNode('transform', n=mod+'_distScaleGrp')\n\n\t\t\t\t\tbsTargetA=mc.duplicate(modCubeControl, n=mod+'_bsSizeTargetA')[0]\n\t\t\t\t\tbsTargetB=mc.duplicate(modCubeControl, n=mod+'_bsSizeTargetB')[0]\n\n\t\t\t\t\tmc.select(bsTargetA+'.cv[0]')\n\t\t\t\t\tmc.select(bsTargetA+'.cv[3:5]', add=1)\n\t\t\t\t\tmc.select(bsTargetA+'.cv[10:13]', add=1)\n\t\t\t\t\tclu1=mc.cluster()\n\t\t\t\t\tmc.xform(clu1, s=(2.4,2.4,2.4))\n\n\t\t\t\t\tmc.select(bsTargetB+'.cv[1:2]')\n\t\t\t\t\tmc.select(bsTargetB+'.cv[6:9]', add=1)\n\t\t\t\t\tmc.select(bsTargetB+'.cv[14:15]', add=1)\n\t\t\t\t\tclu2=mc.cluster()\n\t\t\t\t\tmc.xform(clu2, s=(2.4,2.4,2.4))\n\n\t\t\t\t\tmc.delete(bsTargetA, ch=1)\n\t\t\t\t\tmc.delete(bsTargetB, ch=1)\n\n\t\t\t\t\tbsSizeNode=mc.blendShape(bsTargetA, bsTargetB, modCubeControl, n=mod+'_sizeBS')[0]\n\t\t\t\t\tmc.delete(bsTargetA)\n\t\t\t\t\tmc.delete(bsTargetB)\n\n\t\t\t\t\tsizePlusMinus=mc.createNode('plusMinusAverage', n= mod+'_fixSizePlusMinus')\n\t\t\t\t\tmc.setAttr(sizePlusMinus+'.operation', 1)\n\n\n\t\t\t\t\tmc.connectAttr(mod+'_module.sizeA', sizePlusMinus+'.input2D[0].input2Dx')\n\t\t\t\t\tmc.connectAttr(mod+'_module.sizeB', sizePlusMinus+'.input2D[0].input2Dy')\n\n\t\t\t\t\tmc.setAttr(sizePlusMinus+'.input2D[1].input2Dx', -0.7)\n\t\t\t\t\tmc.setAttr(sizePlusMinus+'.input2D[1].input2Dy', -0.7)\n\n\t\t\t\t\tmc.connectAttr(sizePlusMinus+'.output2D.output2Dx', bsSizeNode+'.'+mod+'_bsSizeTargetA')\n\t\t\t\t\tmc.connectAttr(sizePlusMinus+'.output2D.output2Dy', bsSizeNode+'.'+mod+'_bsSizeTargetB')\n\n\t\t\t\t\tmc.distanceDimension(ep=(0,0,1), sp= (0,0,10))\n\t\t\t\t\tloc1=mc.rename('locator1', mod+'_StartModuleLoc')\n\t\t\t\t\tloc2=mc.rename('locator2', mod+'_EndModuleLoc')\n\t\t\t\t\tdist=mc.rename('distanceDimension1', mod+'_ScaleDistDimension')\n\t\t\t\t\tmc.setAttr(distGrp+'.v', 0)\n\t\t\t\t\tfor x in child:\n\t\t\t\t\t\tif x.endswith('endpoint')==True:\n\t\t\t\t\t\t\tchild =x\n\n\t\t\t\t\tmc.pointConstraint(joint, loc1, mo=0)\n\t\t\t\t\tmc.pointConstraint(child, loc2, mo=0)\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(modCubeControl, modCubeControlGrp)\n\t\t\t\t\tmc.parent(modCircleControl, modCubeControlGrp)\n\t\t\t\t\tmc.parent(modSquareControl, modCubeControlGrp)\n\n\t\t\t\t\tmc.parent(modCubeControlGrp, modCubeControlZtr)\n\t\t\t\t\tmc.parent(modCubeControlZtr, grp )\n\t\t\t\t\tmc.parent(loc1, distGrp)\n\t\t\t\t\tmc.parent(loc2, distGrp)\n\t\t\t\t\tmc.parent(dist, distGrp)\n\t\t\t\t\tmc.parent(distGrp, grp)\n\n\t\t\t\t\tmc.xform(modCubeControlZtr, t=jointPos, ws=1)\n\t\t\t\t\tmc.xform(modCubeControlZtr, ro=jointOrient, ws=1)\n\t\t\t\t\t\n\t\t\t\t\tmc.aimConstraint(child, modCubeControlZtr, wuo=mod+'_point', wut='objectrotation', wu=(0,0,1), u=(0,0,1))\n\t\t\t\t\tmc.pointConstraint(joint, modCubeControlZtr)\n\n\t\t\t\t\tmc.connectAttr(dist+'.distance', modCubeControl+'.sx')\n\t\t\t\t\tmc.connectAttr(mod+'_module.rotateOffset', modCubeControlGrp+'.rx')\n\t\t\t\t\t\n\t\t\t\t\tmc.connectAttr(pcgs+'.sz', modCubeControlZtr+'.sz')\n\t\t\t\t\tmc.connectAttr(pcgs+'.sy', modCubeControlZtr+'.sy')\n\t\t\t\t\tmc.connectAttr(mod+'_module.width', modCubeControlGrp+'.sz')\n\t\t\t\t\tmc.connectAttr(mod+'_module.depth', modCubeControlGrp+'.sy')\n\n\t\t\t\t#Hand---------------------------------------------------------------------------\n\t\t\t\thControl=mel.eval('curve -d 1 -p 0 0 -0.1 -p 0.2 0 -0.1 -p 0.2 0 -0.5 -p 0.4 0 -0.5 -p 0.4 0 0.5 -p 0.2 0 0.5 -p 0.2 0 0.1 -p 0 0 0.1 -p -0.2 0 0.1 -p -0.2 0 0.5 -p -0.4 0 0.5 -p -0.4 0 -0.5 -p -0.2 0 -0.5 -p -0.2 0 -0.1 -p 0 0 -0.1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 ;')\n\t\t\t\thControl=mc.rename(mod+'_handControlProxy')\n\t\t\t\thGRP=mc.createNode('transform', n=mod+'_handControlProxyGrp')\n\t\t\t\tmc.parent(hControl, hGRP)\n\t\t\t\tmc.parent(hGRP, mod+'_moduleGrp')\n\t\t\t\tmc.pointConstraint(joint, hGRP, mo=0)\n\t\t\t\tmc.orientConstraint(joint, hGRP, mo=0)\n\n\t\t\t\tcond=mc.createNode('condition', n=mod+'_handControlProxyCondition')\n\t\t\t\tmc.connectAttr(mod + '_module.moduleType', cond+'.firstTerm')\n\t\t\t\tmc.setAttr(cond+'.secondTerm', 4)\n\t\t\t\tmc.setAttr(cond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(cond+'.colorIfFalseR', 0)\n\t\t\t\tmc.connectAttr(cond+'.outColorR', hGRP + '.v')\n\n\t\t\t\tmc.addAttr(hControl, ln='curlAxis', at='enum', en='z:y:X', k=1)\n\t\t\t\tmc.addAttr(hControl, ln='spreadAxis', at='enum', en='y:x:z', k=1)\n\n\t\t\t\t#SleeveTwist-----------------------------------------------------------------------\n\t\t\t\tsleeveGrp=mc.createNode('transform', n=mod+'_sleeveProxyGrp', p=mod+'_moduleGrp')\n\t\t\t\tmainControl=mc.circle(n=mod+'_sleeveMainControlProxy', r=4, nr=(0,1,0))[0]\n\t\t\t\tmc.parent(mainControl, sleeveGrp)\n\t\t\t\tif mod.startswith('R_')==True:\n\t\t\t\t\tmc.setAttr(sleeveGrp+'.sx', -1)\n\n\t\t\t\tfor i in range (0,4):\n\t\t\t\t\tindex= range(0,4).index(i)\n\t\t\t\t\tsleeveControl=mel.eval('curve -d 1 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 ;')\n\t\t\t\t\tsleeveControl=mc.rename(mod+'_'+str(index)+'_sleeveControlProxy')\n\t\t\t\t\tsleeveControlGRP=mc.createNode('transform', n=mod+'_'+str(index)+'_sleeveControlProxyGrp', p=mainControl)\n\t\t\t\t\tmc.parent(sleeveControl, sleeveControlGRP)\n\t\t\t\t\tif index ==0:\n\t\t\t\t\t\tmc.setAttr(sleeveControlGRP+'.tx', 3)\n\t\t\t\t\telif index==1:\n\t\t\t\t\t\tmc.setAttr(sleeveControlGRP+'.tz', 3)\n\t\t\t\t\telif index==2:\n\t\t\t\t\t\tmc.setAttr(sleeveControlGRP+'.tx', -3)\n\t\t\t\t\telif index==3:\n\t\t\t\t\t\tmc.setAttr(sleeveControlGRP+'.tz', -3)\n\t\t\t\tmc.delete(mc.pointConstraint(joint, sleeveGrp, mo=0))\n\t\t\t\tmc.parentConstraint(joint, sleeveGrp, mo=1)\n\n\t\t\t\tcond=mc.createNode('condition', n=mod+'_sleeveControlProxyCondition')\n\t\t\t\tmc.connectAttr(mod + '_module.sleeve', cond+'.firstTerm')\n\t\t\t\tmc.setAttr(cond+'.secondTerm', 1)\n\t\t\t\tmc.setAttr(cond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(cond+'.colorIfFalseR', 0)\n\t\t\t\tmc.connectAttr(cond+'.outColorR', sleeveGrp + '.v')\n\t\t\t\t'''\n\t\t\t\t#Face################################################\n\t\t\t\t#eyebrow--------------------------------------------------------------\n\t\t\t\tfaceGRP=mc.createNode('transform', n=mod+'_faceControlProxyGrp', p=mod+'_moduleGrp')\n\t\t\t\teyebrowLocs=[]\n\t\t\t\tfor i in range(0,10):\n\t\t\t\t\tindex=\n\t\t\t\t\tmc.createNode('transform',n=mod+'_eyebrowProxyLocsGrp',p=faceGRP)\n\n\n\n\n\n\n\t\t\t\tcond=mc.createNode('condition', n=mod+'_faceControlProxyCondition')\n\t\t\t\tmc.connectAttr(mod + '_module.moduleType', cond+'.firstTerm')\n\t\t\t\tmc.setAttr(cond+'.secondTerm', 5)\n\t\t\t\tmc.setAttr(cond+'.colorIfTrueR', 1)\n\t\t\t\tmc.setAttr(cond+'.colorIfFalseR', 0)\n\t\t\t\tmc.connectAttr(cond+'.outColorR', faceGRP + '.v')\n\n\t\t\t\t\n\t\t\t\tleftEyeLoc= mc.spaceLocator(n=mod+'_faceLeftEyeLOCProxy')\n\t\t\t\tleftEyeLocGRP=mc.createNode('transform', n=mod+'_faceLeftEyeLOCProxy')\n\t\t\t\tmc.parent(leftEyeLoc, leftEyeLocGRP)\n\t\t\t\tmc.xform(leftEyeLocGRP, t=jointPos, ws=1)\n\n\n\t\t\t\trigthEyeLoc= mc.spaceLocator(n=mod+'_faceRigthEyeLOCProxy')\n\t\t\t\trigthEyeLocGRP=mc.createNode('transform', n=mod+'_faceRigthEyeLOCProxy')\n\t\t\t\tmc.parent(rigthEyeLoc, rigthEyeLocGRP)\n\t\t\t\t'''\n\t\t\tmc.refresh()\n\t\t#mirroring orientations######################################################################\n\t\tleftOrient=mc.ls('L_*_orientMesh')\n\t\tfor x in leftOrient:\n\t\t\ty=x.replace('L_', 'R_')\n\t\t\taxisMD=mc.createNode('multiplyDivide', n=x.replace('_orientMesh','_AxisMirrorMD'))\n\t\t\taxisPM=mc.createNode('plusMinusAverage', n=x.replace('_orientMesh','_AxisMirrorPM'))\n\t\t\t\n\n\t\t\tmc.connectAttr(x+'.rx', axisPM+'.input1D[0]')\n\t\t\tmc.connectAttr(axisPM+'.output1D', y+'.rx')\n\t\t\t\n\t\t\tmc.connectAttr(x+'.ry', axisMD+'.input1Y')\n\t\t\tmc.connectAttr(axisMD+'.outputY', y+'.ry')\n\t\t\t\n\t\t\tmc.connectAttr(x+'.rz', axisMD+'.input1Z')\n\t\t\tmc.connectAttr(axisMD+'.outputZ', y+'.rz')\n\n\t\t#mirroring sleeves--------------------------------------------------------------------------\n\t\tleftSleeves=mc.ls('L_*_sleeve*ontrolProxy')\n\t\t\n\t\tfor x in leftSleeves:\n\t\t\ty=x.replace('L_', 'R_')\n\t\t\t\n\t\t\tmc.connectAttr(x+'.t', y+'.t')\n\t\t\tmc.connectAttr(x+'.r', y+'.r')\n\t\t\tmc.connectAttr(x+'.s', y+'.s')\n\t\t\n\n\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(3, 255, 11);background-color: rgb(30, 30, 30);}\")\n\t\tself.statusBar.showMessage('Modules Created', 15000)\n\n\tdef deleteMod(self):\n\t\tsel=mc.ls(sl=1)\t\n\n\t\tfor x in sel:\n\t\t\tif x.endswith('_module'):\n\t\t\t\tmel.eval('pickWalk -d up;')\n\t\t\t\tmel.eval('pickWalk -d up;')\n\t\t\t\tmc.delete()\n\t\t\telse:\n\t\t\t\tpass\n\n\tdef mirrorParameters(self):\n\t\n\t\tleftSide=mc.ls('L_*_module')\n\t\tfootLocators=mc.ls('L_*ProxyLoc')\n\t\tproxyControls=mc.ls('L_*ControlProxy')\n\t\tfor x in leftSide:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Mirroring: '+x,2000)\n\t\t\ty=x.replace('L_', 'R_')\n\t\t\tmc.copyAttr(x, y, values=1)\n\t\t\troOff=mc.getAttr(y+'.rotateOffset')*-1\n\t\t\tmc.setAttr(y+'.rotateOffset',roOff)\n\n\t\tfor x in footLocators:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Mirroring: '+x,2000)\n\t\t\ty=x.replace('L_', 'R_')\n\t\t\tcoord=mc.xform(x, q=1, t=1, ws=1)\n\t\t\ttx=coord[0]*-1\n\t\t\tty=coord[1]\n\t\t\ttz=coord[2]\n\n\t\t\tmc.xform(y, t=(tx, ty, tz), ws=1)\n\n\t\tfor x in proxyControls:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Mirroring: '+x,2000)\n\t\t\ty=x.replace('L_', 'R_')\n\t\t\tmc.copyAttr(x, y, values=1)\t\t\n\n\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(3, 255, 11);background-color: rgb(30, 30, 30);}\")\n\t\tself.statusBar.showMessage('Mirrored', 15000)\n\n\tdef separateMesh(self):\n\t\tsel = mc.ls(sl=1)\n\t\tmc.ConvertSelectionToVertices()\n\t\tselObj = sel[0].split('.')[0]\n\t\tmc.polySplitEdge(sel, operation=1)\n\t\tobjs = mc.polySeparate(selObj)\n\n\t\tfor o in objs[0:-1]:\n\t\t\tmc.polyCloseBorder(o)\n\t\t\tmc.xform(o, cp=1)\n\t\t\tmc.polyColorPerVertex(o, cdo=1)\n\n\t\tfor o in objs:\n\t\t\ttry:\n\t\t\t\tmc.parent(o, 'loMesh_group')\n\t\t\texcept: 0\n\n\t\tmc.select(mc.listRelatives('loMesh_group', c=1), r=1)\n\t\tmc.delete(ch=1)\n\n\t\tmc.select(d=1)\n\n\tdef mirrorSelected(self):\n\t\tsel = mc.ls(sl=1)\n\t\ttNode = mc.createNode('transform')\n\t\tdups = []\n\t\tfor e in sel:\n\t\t\tif e[0] == 'L':\n\t\t\t\tmirName = 'R'+e[1:]\n\t\t\telif e[0] == 'R':\n\t\t\t\tmirName = 'L'+e[1:]\n\t\t\telse:\n\t\t\t\tmirName = e+'Mirror'\n\n\t\t\tdup = mc.duplicate(e, n=mirName)[0]\n\t\t\tmc.select(dup)\n\t\t\tdups.append(dup)\n\t\t\tmc.parent(dup, tNode)\n\t\t\t#joint = mc.getAttr(dup+'.joint')\n\t\t\t#if joint[0] == 'L':\n\t\t\t\t#joint = joint.replace('L_', 'R_')\n\t\t\t#elif joint[0] == 'R':\n\t\t\t\t#joint = joint.replace('R_', 'L_')\n\n\t\t\t#mc.setAttr(dup+'.joint', joint, type='string')\n\n\t\tmc.setAttr(tNode+'.sx', -1)\n\n\t\tfor e in dups:\n\t\t\tmc.parent(e, 'loMesh_group')\n\t\t\tmc.makeIdentity(e, apply=1)\n\t\t\tmc.select(e, r=1)\n\t\t\tmc.polySetToFaceNormal()\n\t\t\tmc.polyAverageNormal()\n\n\t\t\tmc.delete(tNode)\n\n\tdef storeData(self):\n\t\tmoduleDict={}\n\n\t\tmodules=mc.ls('*_module')\n\t\tfor i in modules:\n\t\t\tattributes=mc.listAttr(i, ud=1, hd=1)\t\t\t\n\t\t\tattrsDict = {}\n\t\t\tfor x in attributes:\n\t\t\t\tattrValue=mc.getAttr(i+'.'+x)\n\t\t\t\tattrsDict[x]= attrValue\n\t\t\tmoduleDict[i] = attrsDict\t\t\t\t\t\n\t\t\n\t\tsetupDataPath= self.label_projectPath.text()+r'/Rigging/setup/setupData'\n\t\twith open(setupDataPath + r'/' + 'modulesData'+ '.json', 'w') as outfile:\n\t\t\tjson.dump(moduleDict, outfile, sort_keys=1, indent=4)\n\t\t\n\t\t#___Controls______________________\n\t\tcontrolProxyDict={}\n\n\t\tcontrols=mc.ls('*ControlProxy')\n\n\t\tfor i in controls:\n\t\t\tattributes=mc.listAttr(i, k=1)\n\t\t\tattrsControlDict={}\n\t\t\tfor x in attributes:\n\t\t\t\tattrValue=mc.getAttr(i+'.'+x)\n\t\t\t\tattrsControlDict[x]=attrValue\n\t\t\tcontrolProxyDict[i]=attrsControlDict\n\t\t\n\t\twith open(setupDataPath + r'/' + 'proxyControlsData'+ '.json', 'w') as outfile:\n\t\t\tjson.dump(controlProxyDict, outfile, sort_keys=1, indent=4)\n\n\t\t#____Locators_________________\n\t\tlocProxyDict={}\n\t\tlocators=mc.ls('*ProxyLoc')\n\n\t\tfor i in locators:\n\t\t\tattributes=mc.listAttr(i, k=1)\n\t\t\tattrsLocatorsDict={}\n\t\t\tfor x in attributes:\n\t\t\t\tattrValue=mc.getAttr(i+'.'+x)\n\t\t\t\tattrsLocatorsDict[x]=attrValue\n\t\t\tlocProxyDict[i]=attrsLocatorsDict\n\t\t\n\t\twith open(setupDataPath + r'/' + 'proxyLocatorsData'+ '.json', 'w') as outfile:\n\t\t\tjson.dump(locProxyDict, outfile, sort_keys=1, indent=4)\n\n\t\t#____Orientations_____________\n\t\torientationMeshesDict={}\n\t\torientMeshes=mc.ls('*orientMesh')\n\n\t\tfor i in orientMeshes:\n\t\t\tattributes=mc.listAttr(i, k=1)\n\t\t\tattrsOrientMeshesDict={}\n\t\t\tfor x in attributes:\n\t\t\t\tattrValue=mc.getAttr(i+'.'+x)\n\t\t\t\tattrsOrientMeshesDict[x]=attrValue\n\t\t\torientationMeshesDict[i]=attrsOrientMeshesDict\n\t\t\n\t\twith open(setupDataPath + r'/' + 'orientMeshesData'+ '.json', 'w') as outfile:\n\t\t\tjson.dump(orientationMeshesDict, outfile, sort_keys=1, indent=4)\n\n\t\t#______sleeves______________\n\n\t\tsleevesDict={}\n\t\tsleevesControl=mc.ls('*sleeve*ontrolProxy')\n\n\t\tfor i in sleevesControl:\t\t\t\n\t\t\tattributes=mc.listAttr(i, k=1)\n\t\t\tattrsSleeveDict={}\n\t\t\tfor x in attributes:\n\t\t\t\tattrValue=mc.getAttr(i+'.'+x)\n\t\t\t\tattrsSleeveDict[x]=attrValue\n\t\t\tsleevesDict[i]=attrsSleeveDict\n\t\t\n\t\t\n\t\twith open(setupDataPath + r'/' + 'sleevesData'+ '.json', 'w') as outfile:\n\t\t\tjson.dump(sleevesDict, outfile, sort_keys=1, indent=4)\n\n\n\n\n\t\t##################################\n\t\t#setupData for generation:########\n\t\t##################################\n\t\tpoints=mc.ls('*point')\t\t\n\t\t#_Dicts________\n\t\thipModule={}\n\t\tikModule={}\n\t\tfootModule={}\n\t\thandModule={}\n\t\tjointsData={}\n\t\tikMonoModule={}\n\t\tsleevesModule={}\n\t\t#______________\t\n\t\thip=[]\t\n\t\tfor x in points:\n\t\t\tparent=mc.listRelatives(x, p=1)[0]\n\t\t\tif parent.endswith('point')==False:\n\t\t\t\thip.append(x)\n\t\t\t\tbreak\n\n\t\tmc.select(hip,hi=1)\n\t\tallPoints=mc.ls(sl=1)\n\t\tskinJoints=[]\n\n\t\tfor x in allPoints:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Saving: '+x,2000)\n\n\t\t\tfinalPath=mc.getAttr('jenAutorig_projectPathNode.finalPath')\n\t\t\tif not os.path.exists(finalPath+r'/setup/setupData/setupGenerateData'):\n\t\t\t\tos.makedirs(finalPath+r'/setup/setupData/setupGenerateData')\n\n\t\t\tsetupGenerateDir=finalPath+r'/setup/setupData/setupGenerateData'\n\n\t\t\tskinJoint=x.replace('point', 'JNT')\n\t\t\tmodule=x.replace('point', 'module')\n\t\t\torientMesh=x.replace('point','orientMesh')\n\t\t\tif mc.objExists(module)==True:\n\t\t\t\tmodule=x.replace('point', 'module')\n\t\t\t\tmoduleType=mc.getAttr(module+'.moduleType')\n\t\t\t\tribbon=mc.getAttr(module+'.ribbon')\n\t\t\t\tsleeve=mc.getAttr(module+'.sleeve')\n\n\t\t\t\t#HIP#-------------------------------------------------------------------------------\n\t\t\t\tif moduleType==6:\n\t\t\t\t\thipPos=mc.xform(x,q=1, t=1, ws=1)\n\t\t\t\t\thipOrient=mc.xform(orientMesh, q=1, ro=1, ws=1)\n\t\t\t\t\tname=x.replace('point', 'JNT')\n\t\t\t\t\tbodyControl=x.replace('point', 'hipModBodyControlProxy')\n\t\t\t\t\thipControl=x.replace('point', 'hipModHipControlProxy')\n\n\t\t\t\t\thipModule['name']=name\n\t\t\t\t\thipModule['translate']=hipPos\n\t\t\t\t\thipModule['orientation']=hipOrient\n\t\t\t\t\thipModule['bodyControl']=bodyControl\n\t\t\t\t\thipModule['hipControl']=hipControl\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'hipData'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(hipModule, outfile, sort_keys=1, indent=4)\n\n\t\t\t\t#IK#--------------------------------------------------------------------------------\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tif moduleType==1:\n\t\t\t\t\tjointDict={}\n\t\t\t\t\tikJoints=[]\n\t\t\t\t\t#ikStart=[]\n\t\t\t\t\t#ikEnd=[]\t\t\t\t\t\n\t\t\t\t\tkeyNameJoint=x.replace('point', 'JNT')\n\n\t\t\t\t\tmc.select(x, hi=1)\n\t\t\t\t\tikSel=mc.ls(sl=1)\n\t\t\t\t\tfor i in ikSel:\n\t\t\t\t\t\tindex=ikSel.index(i)\n\t\t\t\t\t\t\n\t\t\t\t\t\tif index==0:\n\t\t\t\t\t\t\tstart=i.replace('point','JNT')\n\t\t\t\t\t\t\t#ikStart.append(start)\n\t\t\t\t\t\t\tikStart=start\n\t\t\t\t\t\t\tif mc.listRelatives(i, p=1)!=None:\n\t\t\t\t\t\t\t\tikStartParent=mc.listRelatives(i, p=1)[0]\n\t\t\t\t\t\t\t\tikStartParent=ikStartParent.replace('point', 'JNT')\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tikStartParent='None'\n\n\t\t\t\t\t\tcontent=i.replace('point','JNT')\n\t\t\t\t\t\tikJoints.append(content)\n\t\t\t\t\t\t\n\t\t\t\t\t\tmTyp=mc.getAttr(i.replace('point', 'module')+'.moduleType')\t\t\t\t\t\t\n\t\t\t\t\t\tif mTyp == 2:\n\t\t\t\t\t\t\tchild=mc.listRelatives(i, c=1, type='joint')\n\t\t\t\t\t\t\tif mc.listRelatives(child, c=1, type='joint')!=None:\n\t\t\t\t\t\t\t\tikEndChild=mc.listRelatives(child, c=1, type='joint')\n\t\t\t\t\t\t\t\tikEndChild=ikEndChild[0].replace('point', 'JNT')\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tikEndChild='None'\n\n\t\t\t\t\t\t\tchild=child[0].replace('point','JNT')\n\t\t\t\t\t\t\tikJoints.append(child)\n\t\t\t\t\t\t\t#ikEnd.append(child)\n\t\t\t\t\t\t\tikEnd=child\n\t\t\t\t\t\t\tikControl=i.replace('point', 'ikControlProxy')\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\tjointDict['ikJoints']=ikJoints\n\t\t\t\t\tjointDict['ikStart']=ikStart\n\t\t\t\t\tjointDict['ikEnd']=ikEnd\n\t\t\t\t\tjointDict['ikControl']=ikControl\n\t\t\t\t\tjointDict['ikEndChild']=ikEndChild\n\t\t\t\t\tjointDict['ikStartParent']=ikStartParent\n\t\t\t\t\tikModule[keyNameJoint] = jointDict\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'ikData'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(ikModule, outfile, sort_keys=1, indent=4)\n\n\t\t\t\t#FOOT-----------------------------------------------------------------------------\n\t\t\t\t\n\t\t\t\tif moduleType==3:\n\t\t\t\t\t#Joints:\n\t\t\t\t\tfootJointDict={}\n\t\t\t\t\tfootJoints=[]\n\t\t\t\t\tkeyNameJoint=x.replace('point','JNT')\n\t\t\t\t\tdad=mc.listRelatives(x, p=1)\n\t\t\t\t\tswitch=dad[0].replace('point', 'switchCTRL')\n\t\t\t\t\tfootIkControl=x.replace('point','footControlProxy')\n\n\t\t\t\t\tfootLocators=[]\n\n\t\t\t\t\ttemp=mc.select(x, hi=1)\n\t\t\t\t\ttemp=mc.ls(sl=1)\n\t\t\t\t\tfor j in temp:\n\t\t\t\t\t\tk=j.replace('point', 'JNT')\n\t\t\t\t\t\tfootJoints.append(k)\n\t\t\t\t\t\n\t\t\t\t\tfootJointDict['joints']=footJoints\n\n\t\t\t\t\t#Locators:\n\t\t\t\t\tlocators=mc.ls(x.replace('point','*ProxyLoc'))\n\t\t\t\t\tfor i in locators:\n\t\t\t\t\t\tfootLocators.append(i)\n\t\t\t\t\tfootParent=dad[0].replace('point', 'JNT')\n\t\t\t\t\t\n\t\t\t\t\tfootJointDict['locators']=footLocators\n\t\t\t\t\tfootJointDict['switchControl']=switch\n\t\t\t\t\tfootJointDict['mainJoint']=keyNameJoint\n\t\t\t\t\tfootJointDict['footParent']=footParent\n\t\t\t\t\tfootJointDict['footIkControl']=footIkControl\n\t\t\t\t\t\n\t\t\t\t\tfootModule[keyNameJoint]=footJointDict\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'footData'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(footModule, outfile, sort_keys=1, indent=4)\n\n\t\t\t\t#HAND-------------------------------------------------------------------------\n\t\t\t\t\n\t\t\t\tif moduleType ==4:\n\n\t\t\t\t\thandDict={}\n\n\t\t\t\t\tkeyNameJoint=x.replace('point','JNT')\n\t\t\t\t\tsetupControl=x.replace('point', 'handControlProxy')\n\t\t\t\t\tdad=mc.listRelatives(x, p=1)\n\t\t\t\t\tswitch=dad[0].replace('point', 'switchCTRL')\n\n\t\t\t\t\tfingerJoints=[]\n\t\t\t\t\t\n\t\t\t\t\ttemp=mc.select(x, hi=1)\n\t\t\t\t\ttemp=mc.ls(sl=1)\n\t\t\t\t\tfor i in temp:\n\t\t\t\t\t\tindex=temp.index(i)\n\t\t\t\t\t\ty=i.replace('point','JNT')\n\t\t\t\t\t\tif index ==0:\n\t\t\t\t\t\t\thandJoint=y\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tfingerJoints.append(y)\n\n\t\t\t\t\tattrs=mc.listAttr(setupControl, ud=1)\n\n\t\t\t\t\thandDict['handJoint']=handJoint\n\t\t\t\t\thandDict['fingerJoints']=fingerJoints\n\t\t\t\t\thandDict['handControl']=setupControl\n\t\t\t\t\thandDict['switchControl']=switch\n\n\t\t\t\t\thandModule[keyNameJoint]=handDict\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'handData'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(handModule, outfile, sort_keys=1, indent=4)\n\t\t\t\t#IKMONO--------------------------------------------------------------------------\n\t\t\t\tif moduleType ==7:\n\n\t\t\t\t\tikMonoDict={}\n\n\t\t\t\t\tkeyNameJoint=x.replace('point','JNT')\n\t\t\t\t\tparent=mc.listRelatives(x, p=1)[0].replace('point','JNT')\n\t\t\t\t\tchild=mc.listRelatives(x, c=1)[0].replace('point','JNT')\n\t\t\t\t\tikMonoList=[keyNameJoint]+[child]\n\n\t\t\t\t\tikMonoDict['joint']=keyNameJoint\n\t\t\t\t\tikMonoDict['parent']=parent\n\t\t\t\t\tikMonoDict['child']=child\n\t\t\t\t\tikMonoDict['ikMonoList']=ikMonoList\n\n\t\t\t\t\tikMonoModule[keyNameJoint]=ikMonoDict\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'ikMono'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(ikMonoModule, outfile, sort_keys=1, indent=4)\n\n\t\t\t\t#sleeves--------------------------------------------------------------------------\n\t\t\t\tif ribbon==1:\n\t\t\t\t\tif sleeve==1:\n\t\t\t\t\t\tkeyNameJoint=x.replace('point','JNT')\n\t\t\t\t\t\tname=x.replace('point', '')\n\t\t\t\t\t\tsleeveDict={}\n\t\t\t\t\t\tsleeveMain=x.replace('point', 'sleeveMainControlProxy')\n\t\t\t\t\t\tcontrols=mc.ls(name+'*sleeveControlProxy')\n\t\t\t\t\t\t\n\t\t\t\t\t\tsleeveDict['main']=sleeveMain\n\t\t\t\t\t\tsleeveDict['controls']=controls\n\n\t\t\t\t\t\tsleevesModule[keyNameJoint]=sleeveDict\n\t\t\t\t\twith open(setupGenerateDir + r'/' + 'sleeveData'+ '.json', 'w') as outfile:\n\t\t\t\t\t\tjson.dump(sleevesModule, outfile, sort_keys=1, indent=4)\n\n\t\t\t\t#face--------------------------------------------------------------------------\n\n\n\t\t\t#FK-------------------------------------------------------------------------\n\t\t\tfkData={}\n\t\t\tkeyName=x.replace('point','JNT')\n\t\t\tjointPosition=mc.xform(x, q=1,t=1, ws=1)\t\n\n\t\t\tjointOrientationX=mc.getAttr(x+'.jointOrientX')\n\t\t\tjointOrientationY=mc.getAttr(x+'.jointOrientY')\n\t\t\tjointOrientationZ=mc.getAttr(x+'.jointOrientZ')\n\t\t\tjointOrientation=[jointOrientationX, jointOrientationY, jointOrientationZ]\t\n\t\t\tif mc.objExists(orientMesh)==True:\n\t\t\t\tworldOrientation=mc.xform(orientMesh, q=1, ro=1, ws=1)\n\t\t\t\tattr=mc.getAttr(module+'.controlType')\n\t\t\t\tif attr==0:\n\t\t\t\t\tfkControlName=x.replace('point', 'fKCubeControlProxy')\n\t\t\t\telif attr==1:\n\t\t\t\t\tfkControlName=x.replace('point', 'fKCircleControlProxy')\n\t\t\t\telif attr==2:\n\t\t\t\t\tfkControlName=x.replace('point', 'fKSquareControlProxy')\n\t\t\telse:\n\t\t\t\tpass\n\t\t\n\t\t\tfkData['translate']=jointPosition\n\t\t\tfkData['jointOrient']=jointOrientation\n\t\t\tif mc.objExists(orientMesh)==True:\n\t\t\t\tfkData['worldOrient']=worldOrientation\n\t\t\t\tfkData['controlName']=fkControlName\n\t\t\telse:\n\t\t\t\tfkData['worldOrient']='None'\n\t\t\t\tfkData['controlName']='None'\n\t\t\t\n\n\t\t\tjointsData[keyName]=fkData\n\t\t\t\n\t\t\twith open(setupGenerateDir + r'/' + 'jointsData'+ '.json', 'w') as outfile:\n\t\t\t\tjson.dump(jointsData, outfile, sort_keys=1, indent=4)\n\t\t\t\n\n\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(3, 255, 11);background-color: rgb(30, 30, 30);}\")\n\t\tself.statusBar.showMessage('Modules Data Saved', 15000)\n\t\tsys.stdout.write(\"Modules Data Saved.\")\n\n\tdef loadModData(self):\n\t\tmodulePath=self.label_projectPath.text()+r'/Rigging/setup/setupData/modulesData.json'\n\t\tmodules=mc.ls('*_module')\n\t\tcontrolsPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/proxyControlsData.json'\n\t\tcontrols=mc.ls('*ControlProxy')\n\t\tlocatorsPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/proxyLocatorsData.json'\n\t\tlocators=mc.ls('*ProxyLoc')\n\t\torientMeshesPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/orientMeshesData.json'\n\t\torientMeshes=mc.ls('*orientMesh')\n\t\tsleevesPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/sleevesData.json'\n\t\tsleeves=mc.ls('L_*_sleeve*ontrolProxy')\n\n\t\tfor x in modules:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Loading: '+x,2000)\t\n\t\t\tattributes=mc.listAttr(x, ud=1, hd=1)\n\t\t\tfor i in attributes:\n\t\t\t\tvalue=absFunc.getDoubleDictJson(modulePath, x, i)\n\t\t\t\tmc.setAttr(x+'.'+i, value)\t\t\t\t\t\t\n\n\t\tfor x in controls:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Loading: '+x,2000)\t\n\t\t\tattributes=mc.listAttr(x, k=1)\n\t\t\tfor i in attributes:\n\t\t\t\tvalue=absFunc.getDoubleDictJson(controlsPath, x, i)\n\t\t\t\ttry:\n\t\t\t\t\tmc.setAttr(x+'.'+i, value)\n\t\t\t\texcept: 0\n\t\t\t\t\t\t\t\t\t\t\t\n\n\t\tfor x in locators:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Loading: '+x,2000)\n\t\t\tattributes=mc.listAttr(x, k=1)\n\t\t\tfor i in attributes:\n\t\t\t\tvalue=absFunc.getDoubleDictJson(locatorsPath, x, i)\n\t\t\t\tmc.setAttr(x+'.'+i, value)\n\t\t\t\n\n\t\tfor x in orientMeshes:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Loading: '+x,2000)\n\t\t\tattributes=mc.listAttr(x, k=1)\n\t\t\tfor i in attributes:\n\t\t\t\tvalue=absFunc.getDoubleDictJson(orientMeshesPath, x, i)\n\t\t\t\ttry:\n\t\t\t\t\tmc.setAttr(x+'.'+i, value)\n\t\t\t\texcept: 0\t\t\t\n\n\t\tfor x in sleeves:\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Loading: '+x,2000)\n\t\t\tattributes=mc.listAttr(x, k=1)\n\t\t\tfor i in attributes:\n\t\t\t\tvalue=absFunc.getDoubleDictJson(sleevesPath, x, i)\n\t\t\t\ttry:\n\t\t\t\t\tmc.setAttr(x+'.'+i, value)\n\t\t\t\texcept: 0\t\t\t\n\n\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(3, 255, 11);background-color: rgb(30, 30, 30);}\")\n\t\tself.statusBar.showMessage('All data loaded', 15000)\n\n\tdef generateRig(self):\n\t\t#DICTS-----------------------------------------------------------------------------------------\n\t\tfootDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/footData.json'\n\t\thandDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/handData.json'\n\t\thipDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/hipData.json'\n\t\tikDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/ikData.json'\n\t\tjointsDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/jointsData.json'\n\t\tmodulesDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/modulesData.json'\n\t\tikMonoDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/ikMono.json'\n\t\tsleeveDataPath=self.label_projectPath.text()+r'/Rigging/setup/setupData/setupGenerateData/sleeveData.json'\n\t\t\n\t\t#--------------------------------------------------------------------------------------------------\n\t\t#Generating skinJoints-----------------------------------------------------------------------------------\n\t\tpoints=mc.ls('*_point')\n\t\thipPoint=[]\n\t\tskinJoints=[]\n\t\tfor x in points:\n\t\t\tparent=mc.listRelatives(x, p=1)[0]\t\t\t\n\t\t\tif parent.endswith('point')==False:\n\t\t\t\thipPoint.append(x)\n\t\t\t\tbreak\n\n\t\tmc.select(hipPoint,hi=1)\n\t\tallPoints=mc.ls(sl=1)\n\t\tscalableJoints=mc.createNode('transform',n='scalableJoints', p='joints_group')\n\t\tdriverJoints=mc.createNode('transform',n='driverJoints_GRP', p='joints_group')\n\t\tmc.parent(driverJoints, 'rig')\n\t\tscalableDriverJoints=mc.createNode('transform',n='scalableDriverJoints_GRP', p='joints_group')\n\t\tmc.parent(scalableDriverJoints, driverJoints)\n\n\n\t\tmc.scaleConstraint('C_root_01_CTRL', scalableDriverJoints)\n\t\tmc.scaleConstraint('C_root_01_CTRL', scalableJoints)\n\t\tfor i in allPoints:\n\t\t\tjointName=i.replace('point', 'JNT')\n\t\t\tskinJoints.append(jointName)\n\t\t\tjointTranslate=absFunc.getDoubleDictJson(jointsDataPath, jointName, 'translate')\n\t\t\tjointOrient=absFunc.getDoubleDictJson(jointsDataPath, jointName, 'jointOrient')\n\t\t\tjointWorldOrient=absFunc.getDoubleDictJson(jointsDataPath, jointName, 'worldOrient')\n\n\t\t\t\n\t\t\tindex=allPoints.index(i)\t\t\t\n\t\t\tmc.select(cl=1)\n\n\t\t\tif index==0:\n\t\t\t\tjoint=mc.joint(n=i.replace('point', 'JNT'),p=jointTranslate,rad=1)\n\t\t\t\tmc.parent(joint, scalableJoints)\n\n\t\t\telse:\n\t\t\t\tjointParent=mc.listRelatives(i, p=1)[0]\n\t\t\t\tjointParent=jointParent.replace('point', 'JNT')\n\t\t\t\tjoint=mc.joint(n=i.replace('point', 'JNT'),p=jointTranslate,rad=1)\n\t\t\t\tmc.parent(joint, jointParent)\n\t\t\t\n\t\t\tmc.joint(joint, e=1, o=(jointOrient[0],jointOrient[1],jointOrient[2]))\n\n\t\t#Resoluting Modules---------------------------------------------------------------------------------\t\t\n\t\tfor joint in skinJoints:\n\t\t\tstatusIndex=skinJoints.index(joint)\n\t\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(255, 203, 14);background-color: rgb(30, 30, 30);}\")\n\t\t\tself.statusBar.showMessage('Generating: '+joint,15000)\n\n\t\t\t#print 'Generating...'+joint\n\t\t\tmodule=joint.replace('JNT', 'module')\n\n\t\t\t#HIP-------------------------------------------------------------\t\t\t\n\t\t\tif joint == absFunc.getSimpleJson(hipDataPath,'name'):\n\t\t\t\t#transformData----------------------------------------------------\n\t\t\t\ttranslate=absFunc.getSimpleJson(hipDataPath,'translate')\n\t\t\t\torientation=absFunc.getSimpleJson(hipDataPath,'orientation')\n\n\t\t\t\t#identify transforms-----------------------------------------------------------\n\t\t\t\tbodyZTR=mc.createNode('transform', n='C_body_01_ZTR', p='C_main_01_CTRL')\n\t\t\t\tbodyCTRL=mc.createNode('transform', n='C_body_01_CTRL', p=bodyZTR)\n\t\t\t\tbodyControlShape=absFunc.getSimpleJson(hipDataPath,'bodyControl')\n\n\t\t\t\thipZTR=mc.createNode('transform', n=joint.replace('JNT','ZTR'), p=bodyCTRL)\n\t\t\t\thipCTRL=mc.createNode('transform', n=joint.replace('JNT','CTRL'), p=hipZTR)\n\t\t\t\thipControlShape=absFunc.getSimpleJson(hipDataPath,'hipControl')\n\n\t\t\t\tmc.xform(bodyZTR, t=(translate[0],translate[1], translate[2]), ws=1)\n\t\t\t\tmc.xform(bodyZTR, ro=(orientation[0],orientation[1], orientation[2]), ws=1)\n\n\t\t\t\tabsFunc.extractControl(bodyCTRL, bodyControlShape)\n\t\t\t\tabsFunc.extractControl(hipCTRL, hipControlShape)\t\n\t\t\t\t\n\t\t\t\tmc.parentConstraint(hipCTRL, joint, mo=1)\n\n\t\t\t#IK START-------------------------------------------------------------\n\t\t\tif joint == absFunc.getDoubleDictJson(ikDataPath, joint, 'ikStart'):\n\t\t\t\t\n\t\t\t\t#Defining Variables---------------------------------------------------------\t\n\t\t\t\tallJoints=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikJoints')\n\t\t\t\tikStart=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikStart')\n\t\t\t\tikEnd=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikEnd')\n\t\t\t\tikEndChild=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikEndChild')\n\t\t\t\tikControl=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikControl')\n\t\t\t\tikStartParent=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikStartParent')\n\t\t\t\t#---------------------------------------------------------------------------\n\t\t\t\t#IK Type----------------------------------------------------------------\n\t\t\t\tikType=mc.getAttr(ikControl+'.ikType')\n\t\t\t\t#IK Spline---------------------------------------------------------------\t\t\t\t\n\t\t\t\tif ikType==1:\n\t\t\t\t\tcurveCoords=[]\n\t\t\t\t\tfor j in allJoints:\n\t\t\t\t\t\tjointCoord=mc.xform(j, q=1, t=1, ws=1)\n\t\t\t\t\t\tcurveCoords.append(jointCoord)\n\t\t\t\t\tcurve=mc.curve( ep=curveCoords, d=3)\n\t\t\t\t\tcurve=mc.rename(curve, ikStart.replace('_JNT','_ikCurve' ))\n\n\t\t\t\t\t#ik lower and upper Joints###########################################################\t\t\t\t\t\n\t\t\t\t\tupperName =ikEndChild.replace('JNT','ikEndDrvJoint')\n\t\t\t\t\tmidName =ikEnd.replace('JNT','ikMidDrvJoint')\n\t\t\t\t\tlowerName =ikStart.replace('JNT','ikStartDrvJoint')\n\n\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\tupperIkJoint=mc.joint(n=upperName)\n\n\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\tlowerIkJoint=mc.joint(n=lowerName)\n\t\t\t\t\t\n\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\tmidIkJoint=mc.joint(n=midName)\n\n\t\t\t\t\tikSplineJoints=[upperIkJoint]+[lowerIkJoint]+[midIkJoint]\n\t\t\t\t\tfor x in ikSplineJoints:\n\t\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\t\tmotionNode=mc.pathAnimation( x, n='C_motionNode_Temp' ,c=curve, fa='x' ,wu=(0,0,1), fm=1, bank=True )\n\t\t\t\t\t\tmc.cutKey(motionNode, at='uValue', time = (0, 1000), clear = True)\n\t\t\t\t\t\tif x == upperName:\n\t\t\t\t\t\t\tmc.setAttr(motionNode+'.uValue', 1)\n\t\t\t\t\t\tif x == lowerName:\n\t\t\t\t\t\t\tmc.setAttr(motionNode+'.uValue', 0)\n\t\t\t\t\t\tif x == midIkJoint:\n\t\t\t\t\t\t\tmc.setAttr(motionNode+'.uValue', 0.5)\n\t\t\t\t\t\tmc.delete(x, mp=1)\n\t\t\t\t\t\tmc.parent(x, scalableDriverJoints)\n\t\t\t\t\t\tmc.makeIdentity(x, a=1)\n\t\t\t\t\n\t\t\t\t\tbodyCTRL='C_body_01_CTRL'\n\n\t\t\t\t\t#-------------------------------------------------\n\t\t\t\t\tikSplineSkinCluster=mc.skinCluster(ikSplineJoints, curve, n=curve.replace('ikCurve', 'curveSkinCluster'), dr=4.0)[0]\n\t\t\t\t\tcurveVertex=mc.ls(curve+'.cv[*]', fl=1)\n\t\t\t\t\tcurveVertexCount=float(len(curveVertex))\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif curveVertexCount==10:\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[0], tv=[(upperIkJoint,0), (midIkJoint, 0), (lowerIkJoint, 1)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[1], tv=[(upperIkJoint,0), (midIkJoint, 0.2), (lowerIkJoint, 0.8)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[2], tv=[(upperIkJoint,0), (midIkJoint, 0.5), (lowerIkJoint, 0.5)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[3], tv=[(upperIkJoint,0), (midIkJoint, 0.8), (lowerIkJoint, 0.2)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[4], tv=[(upperIkJoint,0.1), (midIkJoint, 0.8), (lowerIkJoint, 0.1)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[5], tv=[(upperIkJoint,0.1), (midIkJoint, 0.8), (lowerIkJoint, 0.1)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[6], tv=[(upperIkJoint,0.2), (midIkJoint, 0.8), (lowerIkJoint, 0)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[7], tv=[(upperIkJoint,0.5), (midIkJoint, 0.5), (lowerIkJoint, 0)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[8], tv=[(upperIkJoint,0.8), (midIkJoint, 0.2), (lowerIkJoint, 0)])\n\t\t\t\t\t\tmc.skinPercent(ikSplineSkinCluster, curveVertex[9], tv=[(upperIkJoint,1), (midIkJoint, 0), (lowerIkJoint, 0)])\n\t\t\t\t\t#-----------------------------------------------\n\t\t\t\t\tmc.parent(curve, 'dft_GRP')\n\t\t\t\t\tcontrolCoord=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'translate')\n\t\t\t\t\tcontrolOrient=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'worldOrient')\n\t\t\t\t\tupperGRP=mc.createNode('transform', n=upperName.replace('ikEndDrvJoint','ikZTR'))\n\n\t\t\t\t\tupperControl=mc.createNode('transform', n=upperName.replace('ikEndDrvJoint','ikCTRL'), p=upperGRP)\n\t\t\t\t\t\n\t\t\t\t\tif ikEndChild!=None:\n\t\t\t\t\t\tupperTemp=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'controlName' )\n\t\t\t\t\t\t\n\t\t\t\t\t\tif upperTemp ==None:\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tupperTemp=absFunc.getDoubleDictJson(jointsDataPath, ikEnd, 'controlName' )\n\n\t\t\t\t\telse:\t\t\t\t\t\t\n\t\t\t\t\t\tupperTemp=absFunc.getDoubleDictJson(jointsDataPath, ikEnd, 'controlName' )\n\t\t\t\t\ttempAttr=mc.listAttr(upperTemp, k=1)\n\n\t\t\t\t\tmc.xform(upperGRP, t=controlCoord, ws=1)\n\t\t\t\t\tmc.xform(upperGRP, ro=controlOrient, ws=1)\n\n\t\t\t\t\tabsFunc.extractControl(upperControl, upperTemp)\n\t\t\t\t\t\n\t\t\t\t\tmc.parentConstraint(upperControl, upperIkJoint, mo=1)\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tlowerControl=ikStartParent.replace('JNT', 'CTRL')\n\t\t\t\t\tmc.parentConstraint(lowerControl, lowerIkJoint, mo=1)\n\n\t\t\t\t\tmidGRP=mc.createNode('transform', n=midIkJoint.replace('ikMidDrvJoint','ikMidZTR'))\n\t\t\t\t\tmidControl=mc.circle(n=midIkJoint.replace('ikMidDrvJoint','ikCTRL'), r=16, nr=(0,1,0))\n\t\t\t\t\tmc.addAttr(midControl, ln='squashFactor', at='float', min=-1, max=1, dv=0, k=1)\n\n\t\t\t\t\tmc.parent(midControl, midGRP)\n\t\t\t\t\tmc.delete(mc.pointConstraint(midIkJoint, midGRP, mo=0))\n\t\t\t\t\tmc.parentConstraint(midControl, midIkJoint, mo=1)\t\t\t\t\t\n\n\t\t\t\t\tmc.parent(upperGRP, bodyCTRL)\n\t\t\t\t\tmc.parent(midGRP, bodyCTRL)\n\t\t\t\t\t\n\t\t\t\t\t#----------------------------------------------\n\n\t\t\t\t\tfkSpineControl1=mel.eval('curve -d 1 -p -5.991438 1.431811 15.7761 -p 5.991438 1.431811 15.7761 -p 5.991438 1.431811 -15.7761 -p -5.991438 1.431811 -15.7761 -p -5.991438 1.431811 15.7761 -p 5.991438 1.431811 15.7761 -p 5.991438 -1.431811 15.7761 -p -5.991438 -1.431811 15.7761 -p -5.991438 1.431811 15.7761 -p -5.991438 1.431811 -15.7761 -p -5.991438 -1.431811 -15.7761 -p -5.991438 -1.431811 15.7761 -p 5.991438 -1.431811 15.7761 -p 5.991438 -1.431811 -15.7761 -p -5.991438 -1.431811 -15.7761 -p 5.991438 -1.431811 -15.7761 -p 5.991438 1.431811 -15.7761 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;')\n\t\t\t\t\tfkSpineControl1=mc.rename(fkSpineControl1, allJoints[1].replace('JNT','fkCTRL'))\n\t\t\t\t\tfkSpineZTR1=mc.createNode('transform', n=fkSpineControl1.replace('fkCTRL','fkZTR'))\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(fkSpineControl1, fkSpineZTR1)\n\t\t\t\t\tmc.makeIdentity(fkSpineControl1, a=1)\n\t\t\t\t\tmc.delete(mc.pointConstraint(midControl, lowerControl, fkSpineZTR1, mo=0))\n\t\t\t\t\tmc.parent(fkSpineZTR1, bodyCTRL)\n\n\t\t\t\t\tfkSpineControl2=mel.eval('curve -d 1 -p -5.991438 1.431811 15.7761 -p 5.991438 1.431811 15.7761 -p 5.991438 1.431811 -15.7761 -p -5.991438 1.431811 -15.7761 -p -5.991438 1.431811 15.7761 -p 5.991438 1.431811 15.7761 -p 5.991438 -1.431811 15.7761 -p -5.991438 -1.431811 15.7761 -p -5.991438 1.431811 15.7761 -p -5.991438 1.431811 -15.7761 -p -5.991438 -1.431811 -15.7761 -p -5.991438 -1.431811 15.7761 -p 5.991438 -1.431811 15.7761 -p 5.991438 -1.431811 -15.7761 -p -5.991438 -1.431811 -15.7761 -p 5.991438 -1.431811 -15.7761 -p 5.991438 1.431811 -15.7761 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;')\n\t\t\t\t\tfkSpineControl2=mc.rename(fkSpineControl2, allJoints[2].replace('JNT','fkCTRL'))\n\t\t\t\t\tfkSpineZTR2=mc.createNode('transform', n=fkSpineControl2.replace('fkCTRL','fkZTR'))\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(fkSpineControl2, fkSpineZTR2)\n\t\t\t\t\tmc.makeIdentity(fkSpineControl2, a=1)\n\t\t\t\t\tmc.delete(mc.pointConstraint(upperControl, midControl, fkSpineZTR2, mo=0))\n\t\t\t\t\tmc.parent(fkSpineZTR2, fkSpineControl1)\n\n\t\t\t\t\tmc.parentConstraint(fkSpineControl1, midGRP, mo=1)\n\t\t\t\t\tmc.parentConstraint(fkSpineControl2, upperGRP, mo=1)\n\t\t\t\t\t#-----------------------------------------------------\n\t\t\t\t\tsplineIK = mc.ikHandle(sj=ikStart, ee=ikEnd, sol='ikSplineSolver', c=curve,scv=0, fj=1,pcv=0, n=curve.replace('_ikCurve','_ikSplineHandle'))[0]\t\n\t\t\t\t\tmc.parent(splineIK, 'dft_GRP')\n\n\t\t\t\t\tmc.setAttr(splineIK+'.dTwistControlEnable',1)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpType',4)\n\n\t\t\t\t\tmc.setAttr(splineIK+'.dForwardAxis',2)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpAxis',3)\n\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorY',0)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorX',0)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorZ',1)\n\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorEndX',0)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorEndY',0)\n\t\t\t\t\tmc.setAttr(splineIK+'.dWorldUpVectorEndZ',1)\n\n\t\t\t\t\tmc.connectAttr(lowerControl+'.worldMatrix[0]', splineIK+'.dWorldUpMatrix')\n\t\t\t\t\tmc.connectAttr(upperControl+'.worldMatrix[0]', splineIK+'.dWorldUpMatrixEnd')\n\n\t\t\t\t\t#Squash/Stretch___________________________________________________________________\n\t\t\t\t\t\n\t\t\t\t\tci=mc.createNode('curveInfo', n=curve.replace('ikCurve', 'CI'))\n\n\t\t\t\t\tmc.connectAttr(curve+'Shape.worldSpace[0]', ci+'.inputCurve')\n\n\t\t\t\t\tmdFix=mc.createNode('multiplyDivide', n=curve.replace('_ikCurve', '_scaleFixMD'))\n\t\t\t\t\tmc.connectAttr('C_root_01_CTRL.scaleX', mdFix+'.input2X')\n\t\t\t\t\tmc.connectAttr(ci+'.arcLength', mdFix+'.input1X')\n\t\t\t\t\tmc.setAttr(mdFix+'.operation', 2)\n\n\t\t\t\t\tmdStretch=mc.createNode('multiplyDivide', n=curve.replace('_ikCurve', '_stretchMD'))\n\t\t\t\t\tmc.connectAttr(mdFix+'.outputX', mdStretch+'.input1X')\n\t\t\t\t\tmc.setAttr(mdStretch+'.operation', 2)\n\t\t\t\t\tattr=mc.getAttr(mdStretch+'.input1X')\n\t\t\t\t\tmc.setAttr(mdStretch+'.input2X', attr)\n\n\t\t\t\t\tcond=mc.createNode('condition', n=curve.replace('_ikCurve', '_stretchCOND'))\n\t\t\t\t\tmc.setAttr(cond+'.operation', 2)\n\t\t\t\t\tmc.setAttr(cond+'.secondTerm', 1)\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', cond+'.firstTerm')\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', cond+'.colorIfTrueR')\n\n\t\t\t\t\tmdSquash=mc.createNode('multiplyDivide', n=curve.replace('_ikCurve', '_squashMD'))\n\t\t\t\t\tmc.setAttr(mdSquash+'.operation', 3)\t\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', mdSquash+'.input1X')\n\t\t\t\t\tmc.setAttr(mdSquash+'.input2X', -1)\n\n\t\t\t\t\tsquashCond=mc.createNode('condition', n=curve.replace('_ikCurve', '_squashCOND'))\n\t\t\t\t\tmc.setAttr(squashCond+'.operation', 4)\n\t\t\t\t\tmc.setAttr(squashCond+'.secondTerm', 1)\n\t\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.firstTerm')\n\t\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.colorIfTrueR')\n\n\t\t\t\t\tfor x in allJoints:\t\n\t\t\t\t\t\tif x !=\tikEnd:\n\t\t\t\t\t\t\tmc.connectAttr(cond+'.outColorR', x+'.scaleY')\n\t\t\t\t\t\t\tmc.connectAttr(squashCond+'.outColorR', x+'.scaleX')\n\t\t\t\t\t\t\tmc.connectAttr(squashCond+'.outColorR', x+'.scaleZ')\n\t\t\t\t\tmc.parentConstraint(upperControl, ikEndChild, mo=1)\n\t\t\t\t\tmc.orientConstraint(upperControl, ikEnd, mo=1)\n\t\t\t\t\n\t\t\t\t#ikHandle--------------------------------------------------------------------\n\n\t\t\t\tif ikType==0:\n\t\t\t\t\tallJoints=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikJoints')\n\t\t\t\t\tikStart=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikStart')\n\t\t\t\t\tikEnd=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikEnd')\n\t\t\t\t\tikEndChild=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikEndChild')\n\t\t\t\t\tikControl=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikControl')\n\t\t\t\t\tikStartParent=absFunc.getDoubleDictJson(ikDataPath, joint, 'ikStartParent')\n\n\t\t\t\t\t#ik Joints_______________________________________________________________\n\t\t\t\t\tikZTRSwitch=[]\t\t\n\t\t\t\t\tfor x in allJoints:\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tcoord=absFunc.getDoubleDictJson(jointsDataPath, x, 'translate')\n\t\t\t\t\t\torient=absFunc.getDoubleDictJson(jointsDataPath, x, 'jointOrient')\n\t\t\t\t\t\tworldOrient=absFunc.getDoubleDictJson(jointsDataPath, x, 'worldOrient')\n\t\t\t\t\t\tcontrolOrient=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'worldOrient')\n\t\t\t\t\t\tcontrolCoord=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'translate')\n\n\t\t\t\t\t\tif x == ikStart:\n\t\t\t\t\t\t\tikGRP=mc.createNode('transform', n=x.replace('JNT','ikJNT_GRP'))\n\t\t\t\t\t\t\tmc.parent(ikGRP, scalableDriverJoints)\n\t\t\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\t\tnewJoint=mc.joint(n=x.replace('JNT', 'ikJNT'))\n\n\t\t\t\t\t\tif x == ikStart:\n\t\t\t\t\t\t\tmc.joint(newJoint, e=1, p=coord ,o=(worldOrient[0],worldOrient[1],worldOrient[2]))\n\t\t\t\t\t\t\tmc.parent(newJoint, ikGRP)\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tmc.joint(newJoint, e=1, p=coord ,o=(orient[0],orient[1],orient[2]))\n\n\t\t\t\t\t\tif x ==ikEnd:\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tikZTR=mc.createNode('transform', n=ikEndChild.replace('JNT','ikZTR'), p='C_main_01_CTRL')\n\t\t\t\t\t\t\tikCONS=mc.createNode('transform', n=ikEndChild.replace('JNT','ikCONS'), p=ikZTR)\n\t\t\t\t\t\t\tikCTRL=mc.createNode('transform', n=ikEndChild.replace('JNT','ikCTRL'), p=ikCONS)\n\t\t\t\t\t\t\tikTempCTRL=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'controlName')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmc.xform(ikZTR, t=controlCoord, ws=1)\n\t\t\t\t\t\t\tmc.xform(ikZTR, ro=controlOrient, ws=1)\n\t\t\t\t\t\t\tabsFunc.extractControl(ikCTRL, ikTempCTRL)\n\t\t\t\t\t\t\tikZTRSwitch.append(ikZTR)\n\t\t\t\t\t\tmc.makeIdentity(newJoint, a=1)\n\n\t\t\t\t\t#fk Joints______________________________________________________________\n\t\t\t\t\tfkZTRSwitch=[]\t\t\t\t\t\n\t\t\t\t\tfor x in allJoints:\n\t\t\t\t\t\tindex=allJoints.index(x)\n\t\t\t\t\t\tcoord=absFunc.getDoubleDictJson(jointsDataPath, x, 'translate')\n\t\t\t\t\t\torient=absFunc.getDoubleDictJson(jointsDataPath, x, 'jointOrient')\n\t\t\t\t\t\tworldOrient=absFunc.getDoubleDictJson(jointsDataPath, x, 'worldOrient')\n\t\t\t\t\t\tcontrolOrient=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'worldOrient')\n\t\t\t\t\t\tcontrolCoord=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'translate')\n\t\t\t\t\t\tif x == ikStart:\n\t\t\t\t\t\t\tfkGRP=mc.createNode('transform', n=x.replace('JNT','fkJNT_GRP'))\n\t\t\t\t\t\t\tmc.parent(fkGRP, scalableDriverJoints)\n\t\t\t\t\t\t\tmc.select(cl=1)\n\n\t\t\t\t\t\tnewJoint=mc.joint(n=x.replace('JNT', 'fkJNT'))\n\t\t\t\t\t\t\n\t\t\t\t\t\tif x == ikStart:\n\t\t\t\t\t\t\tmc.joint(newJoint, e=1, p=coord ,o=(worldOrient[0],worldOrient[1],worldOrient[2]))\n\t\t\t\t\t\t\tmc.parent(newJoint, fkGRP)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tmc.joint(newJoint, e=1, p=coord ,o=(orient[0],orient[1],orient[2]))\n\n\t\t\t\t\t\tif x == ikStart:\n\t\t\t\t\t\t\ttempBase=ikStartParent.replace('JNT', 'CTRL')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif mc.objExists(tempBase)==True:\n\t\t\t\t\t\t\t\tchainBase=ikStartParent.replace('JNT', 'CTRL')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tparentOrient=absFunc.getDoubleDictJson(jointsDataPath, ikStartParent, 'worldOrient')\n\t\t\t\t\t\t\t\tparentCoord=absFunc.getDoubleDictJson(jointsDataPath, ikStartParent, 'translate')\n\n\n\t\t\t\t\t\t\t\ttempParentParent=mc.listRelatives(ikStartParent, p=1)[0]\n\t\t\t\t\t\t\t\tparentParent=tempParentParent.replace('JNT', 'ikCTRL')\n\n\t\t\t\t\t\t\t\tfkZTR=mc.createNode('transform', n=ikStartParent.replace('JNT','ZTR'), p=parentParent)\n\t\t\t\t\t\t\t\tfkCONS=mc.createNode('transform', n=ikStartParent.replace('JNT','CONS'), p=fkZTR)\n\t\t\t\t\t\t\t\tfkCTRL=mc.createNode('transform', n=ikStartParent.replace('JNT','CTRL'), p=fkCONS)\n\t\t\t\t\t\t\t\tmc.xform(fkZTR, t=parentCoord, ws=1)\n\t\t\t\t\t\t\t\tmc.xform(fkZTR, ro=parentOrient, ws=1)\n\n\t\t\t\t\t\t\t\tfkTempCTRL=absFunc.getDoubleDictJson(jointsDataPath, ikStartParent, 'controlName')\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tabsFunc.extractControl(fkCTRL, fkTempCTRL)\n\t\t\t\t\t\t\t\tmc.parentConstraint(fkCTRL, ikStartParent)\n\n\t\t\t\t\t\t\t\tchainBase=fkCTRL\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\tif x.endswith('endJNT')==False:\n\t\t\t\t\t\t\ttempPapi=mc.listRelatives(x, p=1)[0]\n\t\t\t\t\t\t\ttempPapi=tempPapi.replace('JNT', 'fkCTRL')\n\t\t\t\t\t\t\ttempPapi2=tempPapi.replace('fkCTRL', 'CTRL')\n\t\t\t\t\t\t\tfkCont=ikStart.replace('JNT', 'fkZTR')\n\n\t\t\t\t\t\t\tif index==0:\n\t\t\t\t\t\t\t\tfkZTR=mc.createNode('transform', n=x.replace('JNT','fkZTR'), p=chainBase)\n\t\t\t\t\t\t\t\tfkZTRSwitch.append(fkZTR)\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tfkZTR=mc.createNode('transform', n=x.replace('JNT','fkZTR'), p=fkCont)\n\t\t\t\t\t\t\tfkCONS=mc.createNode('transform', n=x.replace('JNT','fkCONS'), p=fkZTR)\n\t\t\t\t\t\t\tfkCTRL=mc.createNode('transform', n=x.replace('JNT','fkCTRL'), p=fkCONS)\n\t\t\t\t\t\t\tmc.xform(fkZTR, t=coord, ws=1)\n\t\t\t\t\t\t\tmc.xform(fkZTR, ro=worldOrient, ws=1)\n\t\t\t\t\t\t\tif index !=0:\n\t\t\t\t\t\t\t\tif mc.objExists(tempPapi)== True:\n\t\t\t\t\t\t\t\t\tmc.parentConstraint(tempPapi, fkCONS, mo=1)\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\tmc.parentConstraint(tempPapi2, fkCONS, mo=1)\t\t\t\t\t\n\n\t\t\t\t\t\t\tfkTempCTRL=absFunc.getDoubleDictJson(jointsDataPath, x, 'controlName')\n\t\t\t\t\t\t\tabsFunc.extractControl(fkCTRL, fkTempCTRL)\n\t\t\t\t\t\t\tmc.makeIdentity(newJoint, a=1)\n\t\t\t\t\t\t\tmc.parentConstraint(fkCTRL, newJoint, mo=1)\n\t\t\t\t\t\t\tmc.connectAttr(fkCTRL+'.s', newJoint+'.s')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmc.select(newJoint)\n\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tfkZTR=mc.createNode('transform', n=ikEndChild.replace('JNT','fkZTR'), p=fkCont)\n\t\t\t\t\t\t\tfkCONS=mc.createNode('transform', n=ikEndChild.replace('JNT','fkCONS'), p=fkZTR)\n\t\t\t\t\t\t\tfkCTRL=mc.createNode('transform', n=ikEndChild.replace('JNT','fkCTRL'), p=fkCONS)\n\t\t\t\t\t\t\tmc.xform(fkZTR, t=controlCoord, ws=1)\n\t\t\t\t\t\t\tmc.xform(fkZTR, ro=controlOrient, ws=1)\n\n\t\t\t\t\t\t\ttempPapi=mc.listRelatives(x, p=1)[0]\n\t\t\t\t\t\t\ttempPapi=tempPapi.replace('JNT', 'fkCTRL')\n\t\t\t\t\t\t\tif mc.objExists(tempPapi)== True:\n\t\t\t\t\t\t\t\tmc.parentConstraint(tempPapi, fkCONS, mo=1)\n\n\t\t\t\t\t\t\tfkTempCTRL=absFunc.getDoubleDictJson(jointsDataPath, ikEndChild, 'controlName')\n\t\t\t\t\t\t\tabsFunc.extractControl(fkCTRL, fkTempCTRL)\n\t\t\t\t\t\t\tmc.makeIdentity(newJoint, a=1)\n\n\t\t\t\t\t\t\tmc.parentConstraint(fkCTRL, newJoint, mo=1)\n\t\t\t\t\t\t\tmc.connectAttr(fkCTRL+'.s', newJoint+'.s')\n\t\t\t\t\t\t\tmc.select(newJoint)\n\t\t\t\t\t\n\t\t\t\t\t#Constraints and switch kinematics_______________________________________\n\t\t\t\t\tikA=ikStart.replace('JNT', 'ikJNT')\n\t\t\t\t\tikC=ikEnd.replace('JNT', 'ikJNT')\t\t\t\t\t\n\t\t\t\t\tikB=allJoints[-2].replace('JNT', 'ikJNT')\n\n\t\t\t\t\tfkA=ikStart.replace('JNT', 'fkJNT')\n\t\t\t\t\tfkC=ikEnd.replace('JNT', 'fkJNT')\n\t\t\t\t\tfkB=allJoints[-2].replace('JNT', 'fkJNT')\n\n\t\t\t\t\tikBase=ikStartParent.replace('JNT', 'CTRL')\n\t\t\t\t\tmc.parentConstraint(ikBase,ikA, mo=1)\n\n\t\t\t\t\tswitchCtrl=mel.eval(\"curve -d 1 -p -0.5 0 -1.5 -p -1 0 -1.5 -p 0 0 -2.5 -p 1 0 -1.5 -p 0.5 0 -1.5 -p 0.5 0 -0.5 -p 1.5 0 -0.5 -p 1.5 0 -1 -p 2.5 0 0 -p 1.5 0 1 -p 1.5 0 0.5 -p 0.5 0 0.5 -p 0.5 0 1.5 -p 1 0 1.5 -p 0 0 2.5 -p -1 0 1.5 -p -0.5 0 1.5 -p -0.5 0 0.5 -p -1.5 0 0.5 -p -1.5 0 1 -p -2.5 0 0 -p -1.5 0 -1 -p -1.5 0 -0.5 -p -0.5 0 -0.5 -p -0.5 0 -1.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 ;\")\n\t\t\t\t\tswitchCtrl=mc.rename(switchCtrl, ikC.replace('ikJNT', 'switchCTRL'))\n\t\t\t\t\tswitchGrp=mc.createNode('transform', n=ikC.replace('ikJNT', 'switchGRP'))\n\t\t\t\t\tmc.parent(switchCtrl, switchGrp)\n\t\t\t\t\tpos1=absFunc.getDoubleDictJson(jointsDataPath, ikEnd, 'translate')\n\t\t\t\t\torient1=absFunc.getDoubleDictJson(jointsDataPath, ikEnd, 'worldOrient')\t\t\t\t\t\n\t\t\t\t\tif orient1=='None':\n\t\t\t\t\t\torient1=mc.xform(ikEnd, q=1, ro=1, ws=1)\t\t\t\t\n\n\t\t\t\t\tpos2=mc.xform(ikB, q=1, t=1, ws=1)\n\t\t\t\t\torient2=mc.xform(ikB, q=1, ro=1, ws=1)\n\n\t\t\t\t\tlocSwitch=mc.spaceLocator(n='switchLoc')\n\t\t\t\t\tlocSwitchGrp=mc.createNode('transform', n='switchLocGrp')\n\t\t\t\t\tmc.parent(locSwitch,locSwitchGrp)\n\n\t\t\t\t\tmc.xform(locSwitchGrp, t=pos1, ws=1)\n\t\t\t\t\tif orient1=='None':\n\t\t\t\t\t\tmc.xform(locSwitchGrp, ro=orient1, ws=1)\n\t\t\t\t\telse:\n\t\t\t\t\t\tmc.xform(locSwitchGrp, ro=(orient1[0],orient1[1],orient1[2]), ws=1)\n\n\t\t\t\t\tmc.xform(switchGrp, t=pos2, ws=1)\n\t\t\t\t\tmc.xform(switchGrp, ro=orient2, ws=1)\n\n\t\t\t\t\tmc.parentConstraint(locSwitch, switchGrp, mo=1)\n\t\t\t\t\tmc.xform(locSwitch, ro=(0,0,90), os=1)\n\t\t\t\t\tmc.delete(switchGrp+'_parentConstraint1')\n\t\t\t\t\tmc.delete(locSwitchGrp)\n\t\t\t\t\tmc.xform(switchCtrl, ro=(0,0,-90), os=1)\t\n\t\t\t\t\tmc.makeIdentity(switchCtrl, a=1)\n\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='IK_FK', at='float', min=0, max=1, k=1)\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='ikSpace', at='enum', en='root:main:ikParent:',dv=2, k=1)\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='fkSpace', at='enum', en='root:main:fkParent',dv=2, k=1)\n\n\n\t\t\t\t\trev=mc.createNode('reverse', n=switchCtrl.replace('switchCTRL', 'reverse'))\n\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', rev+'.inputX')\t\t\t\t\n\n\t\t\t\t\tfor a in allJoints:\n\t\t\t\t\t\tik = a.replace('JNT', 'ikJNT')\n\t\t\t\t\t\tfk = a.replace('JNT', 'fkJNT')\n\t\t\t\t\t\t\n\t\t\t\t\t\tblend=mc.createNode('blendColors', n=a.replace('JNT', 'BC'))\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', blend+'.blender')\n\t\t\t\t\t\tmc.connectAttr(ik+'.scaleX', blend+'.color2R')\n\t\t\t\t\t\tmc.connectAttr(ik+'.scaleY', blend+'.color2G')\n\t\t\t\t\t\tmc.connectAttr(ik+'.scaleZ', blend+'.color2B')\n\n\t\t\t\t\t\tmc.connectAttr(fk+'.scaleX', blend+'.color1R')\n\t\t\t\t\t\tmc.connectAttr(fk+'.scaleY', blend+'.color1G')\n\t\t\t\t\t\tmc.connectAttr(fk+'.scaleZ', blend+'.color1B')\n\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputR', a+'.scaleX')\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputG', a+'.scaleY')\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputB', a+'.scaleZ')\n\n\t\t\t\t\t\toriCons=mc.orientConstraint(ik, fk, a, mo=1)\t\t\t\t\t\t\n\t\t\t\t\t\tmc.setAttr(oriCons[0]+'.interpType', 2)\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', oriCons[0]+'.'+fk+'W1')\n\t\t\t\t\t\tmc.connectAttr(rev+'.outputX', oriCons[0]+'.'+ik+'W0')\n\t\t\t\t\t\tif a == ikStart:\n\t\t\t\t\t\t\tpointCons=mc.pointConstraint(ik, fk, a, mo=1)\n\t\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', pointCons[0]+'.'+fk+'W1')\n\t\t\t\t\t\t\tmc.connectAttr(rev+'.outputX', pointCons[0]+'.'+ik+'W0')\n\t\t\t\t\t\n\t\t\t\t\tmc.disconnectAttr(ikEnd+'.scale',ikEndChild+'.inverseScale')\n\t\t\t\t\tmc.parent(switchGrp, 'C_main_01_CTRL')\n\t\t\t\t\tmc.parentConstraint(ikEnd, switchGrp, mo=1)\n\t\t\t\t\t\n\n\t\t\t\t\t#ikSystem________________________________________________________________\n\n\t\t\t\t\thandle = mc.ikHandle(sj=ikA, ee=ikC, sol='ikRPsolver', n=ikC.replace('ikJNT','ikHandle'))[0]\n\t\t\t\t\thandleGrp=mc.createNode('transform', n= handle.replace('Handle', 'HandleGrp'))\n\t\t\t\t\thandleCoord=mc.xform(handle, q=1, t=1, ws=1)\n\t\t\t\t\tmc.xform(handleGrp, t=handleCoord, ws=1)\n\t\t\t\t\tmc.parent(handle, handleGrp)\n\t\t\t\t\tmc.parent(handleGrp, 'dft_GRP')\n\t\t\t\t\t\n\t\t\t\t\tpoleLoc = mc.spaceLocator(n=ikA.replace('ikJNT','ikPoleLoc'))[0]\n\t\t\t\t\tpoleGrp = mc.createNode('transform', n=ikA.replace('ikJNT','ikPoleLocGrp'))\t\t\t\t\t\n\t\t\t\t\tmc.connectAttr(handle+'.poleVector', poleLoc+'.translate')\n\t\t\t\t\tmc.disconnectAttr(handle+'.poleVector', poleLoc+'.translate')\n\t\t\t\t\tmc.parent(poleLoc, poleGrp)\n\t\t\t\t\tikAPos=mc.xform(ikA, q=1,t=1,ws=1)\n\t\t\t\t\tmc.xform(poleGrp, t=ikAPos, ws=1)\n\n\t\t\t\t\tmc.delete(mc.aimConstraint(ikA, ikC, poleLoc, aim=(0,0,-1), u=(0,1,0), wut='object', wuo=handle))\n\n\t\t\t\t\trotPoleLoc=mc.spaceLocator(n=ikA.replace('ikJNT','ikRotPoleLoc'))[0]\n\t\t\t\t\trotPoleLocGrp=mc.createNode('transform', n=ikA.replace('ikJNT','ikRotPoleLocGrp'))\n\t\t\t\t\tmc.parent(rotPoleLoc, rotPoleLocGrp)\n\t\t\t\t\tmc.delete(mc.pointConstraint(ikA, ikC, rotPoleLocGrp, mo=0))\n\t\t\t\t\tmc.delete(mc.orientConstraint(poleLoc, rotPoleLocGrp, mo=0))\n\t\t\t\t\tmc.parent(poleGrp, rotPoleLoc)\n\t\t\t\t\tmc.xform(rotPoleLoc, ro=(-90,0,0), os=1, r=1)\n\n\t\t\t\t\tpoleLocPos=mc.xform(poleLoc, q=1,t=1,ws=1)\n\t\t\t\t\tpoleControl=mel.eval('curve -d 1 -p 0 1 0 -p 0 0.707107 0.707107 -p 0 0 1 -p 0 -0.707107 0.707107 -p 0 -1 0 -p 0 -0.707107 -0.707107 -p 0 0 -1 -p 0 0.707107 -0.707107 -p 0 1 0 -p -0.707107 0.707107 0 -p -1 0 0 -p -0.707107 -0.707107 0 -p 0 -1 0 -p 0.707107 -0.707107 0 -p 1 0 0 -p 0.707107 0.707107 0 -p 0 1 0 -p 0 0.707107 -0.707107 -p 0 0 -1 -p 0.707107 0 -0.707107 -p 1 0 0 -p 0.707107 0 0.707107 -p 0 0 1 -p -0.707107 0 0.707107 -p -1 0 0 -p -0.707107 0 -0.707107 -p 0 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 ;')\n\t\t\t\t\tpoleControl=mc.rename(poleControl, ikA.replace('ikJNT','PoleVector_ikCTRL'))\t\t\t\n\t\t\t\t\tmc.xform(poleControl, t=poleLocPos, ws=1  )\n\t\t\t\t\tmc.poleVectorConstraint(poleControl, handle)\n\t\t\t\t\tmc.delete(rotPoleLocGrp)\n\t\t\t\t\tpapi=absFunc.localGrp(poleControl)\n\n\t\t\t\t\tikZTRSwitch.append(mc.listRelatives(poleControl, p=1)[0])\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(papi, 'C_main_01_CTRL')\n\n\t\t\t\t\tmc.addAttr(poleControl, ln='space', at='enum', en='world:ikParent:ikChild', k=1)\n\n\t\t\t\t\t\n\t\t\t\t\t#Squash/Stretch___________________________________________________________\n\t\t\t\t\taCoord=absFunc.getDoubleDictJson(jointsDataPath, ikStart, 'translate')\n\t\t\t\t\tbCoord=absFunc.getDoubleDictJson(jointsDataPath, ikEnd, 'translate')\t\t\t\t\t\n\n\n\t\t\t\t\tmc.distanceDimension(sp=(0, 0, 0), ep=(1, 1, 1))\n\n\t\t\t\t\tloc1=mc.rename('locator1', ikA.replace('ikJNT', 'distLoc'))\n\t\t\t\t\tloc2=mc.rename('locator2', ikC.replace('endikJNT', 'distLoc'))\n\t\t\t\t\tdist=mc.rename('distanceDimension1', ikC.replace('endikJNT', 'distDimension'))\n\t\t\t\t\tmc.xform(loc1, t=(aCoord[0], aCoord[1], aCoord[2]), ws=1)\n\t\t\t\t\tmc.xform(loc2, t=(bCoord[0], bCoord[1], bCoord[2]), ws=1)\n\t\t\t\t\t\n\t\t\t\t\tdistGrp=mc.createNode('transform', n=ikA.replace('ikJNT', 'distGRP'))\n\t\t\t\t\t\n\t\t\t\t\t_obj=[loc1, loc2, dist]\n\t\t\t\t\tgrpList=absFunc.localGrp(_obj)\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(grpList, distGrp)\n\t\t\t\t\tmc.parent(distGrp, 'dft_GRP')\n\n\t\t\t\t\tmdFixStretch=mc.createNode('multiplyDivide', n=ikA.replace('ikJNT', 'StretchFix_MD'))\n\t\t\t\t\tmdStretch=mc.createNode('multiplyDivide', n=ikA.replace('ikJNT', 'Stretch_MD'))\n\t\t\t\t\tcondStretch=mc.createNode('condition', n=ikA.replace('ikJNT', 'Stretch_COND'))\n\n\t\t\t\t\tmc.connectAttr(dist+'Shape.distance', mdFixStretch+'.input1X')\n\t\t\t\t\tmc.connectAttr('C_root_01_CTRL.scaleX', mdFixStretch+'.input2X')\n\t\t\t\t\tmc.setAttr(mdFixStretch+'.operation', 2)\n\n\t\t\t\t\tmc.connectAttr(mdFixStretch+'.outputX', mdStretch +'.input1X')\n\t\t\t\t\tdistNum=mc.getAttr(mdStretch+'.input1X')\n\t\t\t\t\tmc.setAttr(mdStretch+'.input2X', distNum)\n\t\t\t\t\tmc.setAttr(mdStretch+'.operation', 2)\n\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', condStretch+'.firstTerm')\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', condStretch+'.colorIfTrueR')\n\t\t\t\t\tmc.setAttr(condStretch+'.secondTerm', 1)\n\t\t\t\t\tmc.setAttr(condStretch+'.colorIfFalse', 1,1,1)\n\t\t\t\t\tmc.setAttr(condStretch+'.operation', 3)\n\t\t\t\t\t\n\n\t\t\t\t\tmdSquash=mc.createNode('multiplyDivide', n=ikA.replace('ikJNT', '_squashMD'))\n\t\t\t\t\tmc.setAttr(mdSquash+'.operation', 3)\n\t\t\t\t\tmc.connectAttr(mdStretch+'.outputX', mdSquash+'.input1X')\n\t\t\t\t\tmc.setAttr(mdSquash+'.input2X', -1)\n\n\t\t\t\t\tsquashCond=mc.createNode('condition', n=ikA.replace('ikJNT', '_squashCOND'))\n\t\t\t\t\tmc.setAttr(squashCond+'.operation', 4)\n\t\t\t\t\tmc.setAttr(squashCond+'.secondTerm', 1)\n\t\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.firstTerm')\n\t\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.colorIfTrueR')\t\t\t\t\t\n\n\t\t\t\t\tfor x in allJoints:\n\t\t\t\t\t\tik=x.replace('JNT', 'ikJNT')\n\n\t\t\t\t\t\tif x != ikEnd:\n\t\t\t\t\t\t\tmc.connectAttr(condStretch+'.outColorR', ik+'.scaleX')\n\t\t\t\t\t\t\tmc.connectAttr(squashCond+'.outColorR', ik+'.scaleY')\n\t\t\t\t\t\t\tmc.connectAttr(squashCond+'.outColorR', ik+'.scaleZ')\n\n\t\t\t\t\t#Binding ikControls to Joints___________________________________________________________\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tmc.parentConstraint(ikCTRL, grpList[1], mo=1)\n\t\t\t\t\tmc.parentConstraint(ikStartParent.replace('JNT','CTRL'),grpList[0], mo=1)\n\t\t\t\t\tmc.parentConstraint(ikCTRL, handleGrp, mo=1)\n\t\t\t\t\tmc.orientConstraint(ikCTRL, ikC, mo=1)\n\t\t\t\t\tmc.addAttr(ikCTRL, ln='size', at='float', min=0.01,dv=1, k=1)\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleX')\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleY')\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleZ')\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.s', ikC+'.s')\n\t\t\t\t\t#----------------------------------------------------------------------------------------\n\t\t\t\t\t#Spaces----------------------------------------------------------------------------------\n\t\t\t\t\t#----------------------------------------------------------------------------------------\n\t\t\t\t\tspaceRoot='C_root_01_CTRL'\n\t\t\t\t\tspaceMain='C_main_01_CTRL'\n\t\t\t\t\tspaceParent=ikStartParent.replace('JNT', 'CTRL')\n\n\t\t\t\t\tparents=[spaceRoot]+[spaceMain]+[spaceParent]\t\t\t\t\t\n\t\t\t\t\tparentSpaces=[]\n\t\t\t\t\tfor e in parents:\n\t\t\t\t\t\tif mc.objExists(e.replace('CTRL', 'parentSpaceZTR'))==True:\n\t\t\t\t\t\t\tparentSpaceZTR=e.replace('CTRL', 'parentSpaceZTR')\n\t\t\t\t\t\t\tparentSpace=e.replace('CTRL', 'parentSpace')\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tparentSpaceZTR=mc.createNode('transform',n=e.replace('CTRL', 'parentSpaceZTR'))\n\t\t\t\t\t\t\tparentSpace=mc.createNode('transform',n=e.replace('CTRL', 'parentSpace'), p=parentSpaceZTR)\t\t\t\t\t\t\n\t\t\t\t\t\t\tmc.delete(mc.pointConstraint(e, parentSpaceZTR, mo=0))\n\t\t\t\t\t\t\tmc.parent(parentSpaceZTR, e)\n\t\t\t\t\t\tparentSpaces.append(parentSpace)\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t#IK Space--------------------------------------------------------------------\n\t\t\t\t\tikCTRL=ikEndChild.replace('JNT', 'ikCTRL')\n\t\t\t\t\tikZTR=ikCTRL.replace('ikCTRL', 'ikZTR')\n\t\t\t\t\tikCONS=ikCTRL.replace('ikCTRL', 'ikCONS')\n\t\t\t\t\tikSpaceGRP=mc.createNode('transform', n=ikCTRL.replace('ikCTRL', 'ikSpaceGRP'))\t\n\t\t\t\t\tikSpace=mc.createNode('transform', n=ikCTRL.replace('ikCTRL', 'ikSpace'),p=ikSpaceGRP)\t\t\t\t\t\n\t\t\t\t\tmc.delete(mc.pointConstraint(ikCTRL, ikSpaceGRP, mo=0))\n\t\t\t\t\tmc.parent(ikSpaceGRP, ikZTR)\n\t\t\t\t\tmc.parent(ikCONS, ikSpace)\n\t\t\t\t\t# FKSpace--------------------------------------------------------------------\n\t\t\t\t\tfkCTRL=ikStart.replace('JNT', 'fkCTRL')\n\t\t\t\t\tfkZTR=fkCTRL.replace('fkCTRL', 'fkZTR')\n\t\t\t\t\tfkCONS=fkCTRL.replace('fkCTRL', 'fkCONS')\n\t\t\t\t\tfkSpaceGRP=mc.createNode('transform', n=fkCTRL.replace('fkCTRL', 'fkSpaceGRP'))\t\n\t\t\t\t\tfkSpace=mc.createNode('transform', n=fkCTRL.replace('fkCTRL', 'fkSpace'),p=fkSpaceGRP)\t\t\t\t\t\n\t\t\t\t\tmc.delete(mc.pointConstraint(fkCTRL, fkSpaceGRP, mo=0))\n\t\t\t\t\tmc.parent(fkSpaceGRP, fkZTR)\n\t\t\t\t\tmc.parent(fkCONS, fkSpace)\n\t\t\t\t\t#spaceConstraining----------------------------------------------------------\n\t\t\t\t\t#ik:\n\t\t\t\t\tmc.select(parentSpaces)\n\t\t\t\t\tmc.select(ikSpace, add=1)\n\t\t\t\t\tspaceConstraint=mc.parentConstraint(mo=1)\n\t\t\t\t\tfor s in parentSpaces:\n\t\t\t\t\t\tindex=parentSpaces.index(s)\n\t\t\t\t\t\tremap=mc.createNode('remapValue', n=s.replace('parentSpace', ikSpace.split('_')[0]+ikSpace.split('_')[1]+'remapSpace'))\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_FloatValue', 1)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_Position', 0.5)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[1].value_FloatValue', 0)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[1].value_Position', 1)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_Interp', 1)\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.ikSpace',remap+'.inputValue')\n\t\t\t\t\t\tmc.connectAttr(remap+'.outValue', spaceConstraint[0]+'.'+s+'W'+str(index))\n\t\t\t\t\t\tmc.setAttr(remap+'.inputMin',index-1)\n\t\t\t\t\t\tmc.setAttr(remap+'.inputMax',index+1)\t\n\t\t\t\t\t#fk:\n\t\t\t\t\tmc.select(parentSpaces)\n\t\t\t\t\tmc.select(fkSpace, add=1)\n\t\t\t\t\tspaceConstraint=mc.orientConstraint(mo=1)\n\t\t\t\t\tfor s in parentSpaces:\n\t\t\t\t\t\tindex=parentSpaces.index(s)\n\t\t\t\t\t\tremap=mc.createNode('remapValue', n=s.replace('parentSpace',fkSpace.split('_')[0]+fkSpace.split('_')[1]+'remapSpace'))\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_FloatValue', 1)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_Position', 0.5)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[1].value_FloatValue', 0)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[1].value_Position', 1)\n\t\t\t\t\t\tmc.setAttr(remap+'.value[2].value_Interp', 1)\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.fkSpace',remap+'.inputValue')\n\t\t\t\t\t\tmc.connectAttr(remap+'.outValue', spaceConstraint[0]+'.'+s+'W'+str(index))\n\t\t\t\t\t\tmc.setAttr(remap+'.inputMin',index-1)\n\t\t\t\t\t\tmc.setAttr(remap+'.inputMax',index+1)\n\n\t\t\t\t\t#visibility----------------------------------------------------\n\t\t\t\t\treverse=switchCtrl.replace('switchCTRL', 'reverse')\t\n\t\t\t\t\tfor i in fkZTRSwitch:\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', i+'.v')\t\t\t\t\t\n\t\t\t\t\tfor i in ikZTRSwitch:\n\t\t\t\t\t\tmc.connectAttr(reverse+'.outputX', i+'.v')\t\t\t\t\n\n\t\t\t#HAND------------------------------------------------------------------------------------------\n\t\t\t#----------------------------------------------------------------------------------------------\n\t\t\t#----------------------------------------------------------------------------------------------\n\t\t\tif joint == absFunc.getDoubleDictJson(handDataPath, joint, 'handJoint'):\n\t\t\t\t#defining variables----------------------------------------------------------------\n\t\t\t\thandJoint=absFunc.getDoubleDictJson(handDataPath, joint, 'handJoint')\n\t\t\t\tfingerList=absFunc.getDoubleDictJson(handDataPath, joint, 'fingerJoints')\n\t\t\t\thandControlData=absFunc.getDoubleDictJson(handDataPath, joint, 'handControl')\n\t\t\t\tswitchCtrl=absFunc.getDoubleDictJson(handDataPath, joint, 'switchControl')\n\t\t\t\tjointPos=absFunc.getDoubleDictJson(jointsDataPath, joint, 'translate')\n\t\t\t\tjointOri=absFunc.getDoubleDictJson(jointsDataPath, joint, 'worldOrient')\n\t\t\t\t#----------------------------------------------------------------------------------\n\t\t\t\tif mc.objExists(switchCtrl)==True:\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='____', at='enum', en='fingerAttr:', k=1)\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='spread', at='float', k=1)\n\t\t\t\t\tmc.addAttr(switchCtrl, ln='fist', at='float',  k=1)\t\t\t\t\t\n\n\t\t\t\thandGroup=mc.createNode('transform', n=joint.replace('JNT', 'GRP'), p='C_main_01_CTRL' )\n\t\t\t\thandZTR=mc.createNode('transform', n=joint.replace('JNT', 'ZTR'), p=handGroup )\n\t\t\t\tmc.xform(handGroup, t=(jointPos[0], jointPos[1], jointPos[2]), ws=1)\n\t\t\t\tmc.xform(handGroup, ro=(jointOri[0], jointOri[1], jointOri[2]), ws=1)\n\t\t\t\tmc.parentConstraint(joint, handGroup, mo=1)\n\t\t\t\tmc.scaleConstraint(joint, handGroup, mo=1)\n\t\t\t\t#definingFingersQuantity---------------------------------------------------------\n\t\t\t\ttempList=[]\n\t\t\t\tfor i in fingerList:\n\t\t\t\t\tif i.endswith('endJNT')==False:\n\t\t\t\t\t\ttempList.append(i.split('_')[1])\n\t\t\t\ttempList=set(tempList)\n\t\t\t\ttempList=list(tempList)\n\t\t\t\tfingerCount=len(tempList)\n\t\t\t\tmult=180/fingerCount\t\t\t\t\n\t\t\t\t#---------------------------------------------------------------------------------\n\t\t\t\tspreadJoints=[]\t\t\t\t\n\t\t\t\tfor x in fingerList:\n\t\t\t\t\tif x.endswith('endJNT')==False:\n\t\t\t\t\t\txCoord=absFunc.getDoubleDictJson(jointsDataPath, x, 'translate')\n\t\t\t\t\t\txOrient=absFunc.getDoubleDictJson(jointsDataPath, x, 'worldOrient')\n\t\t\t\t\t\t#-----------------------------------------------------------------------------------\n\t\t\t\t\t\tindex=fingerList.index(x)\t\t\t\t\t\t\n\t\t\t\t\t\tdad=mc.listRelatives(x, p=1)[0]\t\t\t\t\t\t\n\t\t\t\t\t\tif dad == joint:\n\t\t\t\t\t\t\tgroup=mc.createNode('transform', n=x.replace('JNT', 'GRP'), p=handZTR )\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tgroup=mc.createNode('transform', n=x.replace('JNT', 'GRP'), p=dad.replace('JNT', 'CTRL'))\n\t\t\t\t\t\t\n\t\t\t\t\t\tCONS=mc.createNode('transform', n=x.replace('JNT', 'CONS'), p=group)\n\t\t\t\t\t\tZTR=mc.createNode('transform', n=x.replace('JNT', 'ZTR'), p=CONS)\n\t\t\t\t\t\tCONS=mc.createNode('transform', n=x.replace('JNT', 'CONS'), p=group)\n\n\t\t\t\t\t\tspreadGRP=mc.createNode('transform', n=x.replace('JNT', 'spreadCONS'), p=CONS)\n\t\t\t\t\t\tfistGRP=mc.createNode('transform', n=x.replace('JNT', 'fistCONS'), p=spreadGRP)\t\t\t\t\t\t\n\n\t\t\t\t\t\tCTRL=mc.createNode('transform', n=x.replace('JNT', 'CTRL'), p=fistGRP)\n\n\t\t\t\t\t\tmc.xform(group, t=(xCoord[0],xCoord[1],xCoord[2]), ws=1)\n\t\t\t\t\t\tmc.xform(group, ro=(xOrient[0],xOrient[1],xOrient[2]), ws=1)\t\t\t\t\t\t\n\n\t\t\t\t\t\ttempCTRL=absFunc.getDoubleDictJson(jointsDataPath, x, 'controlName')\n\t\t\t\t\t\tabsFunc.extractControl(CTRL, tempCTRL)\t\t\t\t\t\t\n\t\t\t\t\t\tmc.parentConstraint(CTRL, x)\n\t\t\t\t\t\t#-fingerAttr-----------------------------------------------------------------------------\n\t\t\t\t\t\tif mc.objExists(switchCtrl)==True:\n\t\t\t\t\t\t\tif mc.getAttr(handControlData+'.spreadAxis')==0:\n\t\t\t\t\t\t\t\tspreadAxis = 'Y'\n\t\t\t\t\t\t\telif mc.getAttr(handControlData+'.spreadAxis')==1:\n\t\t\t\t\t\t\t\tspreadAxis = 'X'\n\t\t\t\t\t\t\telif mc.getAttr(handControlData+'.spreadAxis')==2:\n\t\t\t\t\t\t\t\tspreadAxis = 'Z'\n\n\t\t\t\t\t\t\tif mc.getAttr(handControlData+'.curlAxis')==0:\n\t\t\t\t\t\t\t\tcurlAxis = 'Z'\n\t\t\t\t\t\t\telif mc.getAttr(handControlData+'.curlAxis')==1:\n\t\t\t\t\t\t\t\tcurlAxis = 'Y'\n\t\t\t\t\t\t\telif mc.getAttr(handControlData+'.curlAxis')==2:\n\t\t\t\t\t\t\t\tcurlAxis = 'X'\n\n\n\t\t\t\t\t\t\tif not 'Thumb' in x:\n\t\t\t\t\t\t\t\tif x.endswith('01_JNT') == True:\n\t\t\t\t\t\t\t\t\tpass\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t#spread---------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\t#spreadJoints.append(spreadGRP)\n\t\t\t\t\t\t\t\t\t#mc.connectAttr(switchCtrl+'.spread', spreadGRP+'.rotate'+spreadAxis)\n\t\t\t\t\t\t\t\tif dad != joint:\n\t\t\t\t\t\t\t\t\t#fist--------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\t#fistJoints.append(fistGRP)\n\t\t\t\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.fist', fistGRP+'.rotate'+curlAxis)\t\t\t\t\t\t\t\t\n\n\t\t\t#FOOT---------------------------------------------------------------------------------------------\n\t\t\tif joint == absFunc.getDoubleDictJson(footDataPath, joint, 'mainJoint'):\n\t\t\t\t#Defining Variables\n\t\t\t\tlocatorsList=absFunc.getDoubleDictJson(footDataPath, joint, 'locators')\n\t\t\t\tfootJoints=absFunc.getDoubleDictJson(footDataPath, joint, 'joints')\n\t\t\t\tswitchCtrl=absFunc.getDoubleDictJson(footDataPath, joint, 'switchControl')\n\t\t\t\tfootParent=absFunc.getDoubleDictJson(footDataPath, joint, 'footParent')\n\t\t\t\tikHandleGRP=footParent.replace('JNT', 'ikHandleGrp')\n\t\t\t\tstretchIKLoc=footParent.replace('endJNT', 'distLoc_GRP')\n\t\t\t\tikControlModuleParent=joint.replace('JNT', 'ikCTRL')\n\t\t\t\tfootIkParent=footParent.replace('JNT', 'ikJNT')\n\t\t\t\tfootFkParent=footParent.replace('JNT', 'fkJNT')\t\t\t\t\n\t\t\t\t#-----------------------------------------------------------------------------------------\n\t\t\t\tif mc.objExists(ikControlModuleParent.replace('ikCTRL', 'ikSpace_parentConstraint1'))==True:\n\t\t\t\t\toldConstraint=ikControlModuleParent.replace('ikCTRL', 'ikSpace_parentConstraint1')\n\t\t\t\t\tremapList=mc.listConnections(oldConstraint,s=1, d=0, type='remapValue')\t\t\t\n\t\t\t\t\toutSpace=mc.listConnections(oldConstraint,s=0, d=1,sh=0, type='transform')[0]\n\t\t\t\t\toutSpaceGRP=outSpace.replace('ikSpace', 'ikSpaceGRP')\n\t\t\t\t\tztr=mc.listRelatives(outSpaceGRP, p=1)[0]\n\t\t\t\t\tcons=mc.listRelatives(outSpace, c=1)\n\t\t\t\t\tfor i in cons:\n\t\t\t\t\t\tif i != oldConstraint:\n\t\t\t\t\t\t\tcons=i\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\tmc.parent(cons, ztr)\n\t\t\t\t\tmc.parent(outSpaceGRP, w=1)\t\t\t\n\t\t\t\t\n\t\t\t\t#ik Joints_______________________________________________________________\n\t\t\t\tikJointsList=[]\n\t\t\t\tfor x in footJoints:\n\t\t\t\t\tindex=footJoints.index(x)\n\t\t\t\t\tjointCoord=absFunc.getDoubleDictJson(jointsDataPath, x, 'translate')\n\t\t\t\t\tjointOrient=absFunc.getDoubleDictJson(jointsDataPath, x, 'jointOrient')\n\t\t\t\t\tif index == 0:\n\t\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\t\tscaleGRP=mc.createNode('transform', n=x.replace('JNT', 'ikScaleGRP'))\n\t\t\t\t\t\tmc.xform(scaleGRP, t=(jointCoord[0],jointCoord[1],jointCoord[2]), ws=1)\n\n\t\t\t\t\tikJoint=mc.joint(n=x.replace('JNT', 'ikJNT'))\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif index == 0:\t\t\t\t\t\t\n\t\t\t\t\t\tmc.parent(ikJoint, footIkParent)\n\t\t\t\t\t\tmc.parent(scaleGRP, footIkParent)\n\t\t\t\t\t\tmc.joint(ikJoint, e=1, p=(jointCoord[0],jointCoord[1],jointCoord[2]) ,o=(jointOrient[0],jointOrient[1],jointOrient[2]))\n\t\t\t\t\t\tmc.parent(ikJoint, scaleGRP)\n\t\t\t\t\telse:\n\t\t\t\t\t\tmc.joint(ikJoint, e=1, p=(jointCoord[0],jointCoord[1],jointCoord[2]) ,o=(jointOrient[0],jointOrient[1],jointOrient[2]))\n\n\t\t\t\t\tmc.makeIdentity(ikJoint, a=1)\n\t\t\t\t\tikJointsList.append(ikJoint)\n\n\t\t\t\tcontrolCoord=absFunc.getDoubleDictJson(jointsDataPath, joint, 'translate')\n\t\t\t\tcontrolOrient=absFunc.getDoubleDictJson(jointsDataPath, joint, 'worldOrient')\n\t\t\t\tmc.disconnectAttr(footJoints[0]+'.scale',footJoints[1]+'.inverseScale')\n\t\t\t\tmc.disconnectAttr(footJoints[0].replace('JNT', 'ikJNT')+'.scale',footJoints[1].replace('JNT', 'ikJNT')+'.inverseScale')\n\n\t\t\t\tikZTRSwitch=[]\n\t\t\t\tikFootZTR=mc.createNode('transform', n=joint.replace('JNT','ikFootZTR'), p='C_main_01_CTRL')\n\t\t\t\tikFootCONS=mc.createNode('transform', n=joint.replace('JNT','ikFootCONS'), p=ikFootZTR)\n\t\t\t\tikCTRL=mc.createNode('transform', n=joint.replace('JNT','ikFootCTRL'), p=ikFootCONS)\n\t\t\t\tikTempCTRL=absFunc.getDoubleDictJson(footDataPath, joint, 'footIkControl')\n\t\t\t\tmc.xform(ikFootZTR, t=controlCoord, ws=1)\n\t\t\t\tmc.xform(ikFootZTR, ro=controlOrient, ws=1)\n\t\t\t\tabsFunc.extractControl(ikCTRL, ikTempCTRL)\n\t\t\t\tikZTRSwitch.append(ikFootZTR)\n\n\t\t\t\t#visibility------------------------------------------------\n\t\t\t\treverse=switchCtrl.replace('switchCTRL', 'reverse')\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor i in ikZTRSwitch:\n\t\t\t\t\tmc.connectAttr(reverse+'.outputX', i+'.v')\n\t\t\t\t#----------------------------------------------------------\n\n\t\t\t\tif mc.objExists(ikControlModuleParent.replace('ikCTRL', 'ikSpace_parentConstraint1'))==True:\n\t\t\t\t\tmc.parent(outSpaceGRP, ikFootZTR)\n\t\t\t\t\tmc.parent(ikFootCONS, outSpace)\n\n\t\t\t\tmc.select(ikCTRL +'.cv[*]')\n\t\t\t\tmc.move(0,y=1)\n\n\t\t\t\tmc.addAttr(ikCTRL, ln='____', at='enum', en='footAttr:', k=1)\n\t\t\t\tmc.addAttr(ikCTRL, ln='footRoll', at='float', dv=0,  k=1)\n\t\t\t\tmc.addAttr(ikCTRL, ln='rollAngle', at='float', dv=20,  k=1)\n\t\t\t\tmc.addAttr(ikCTRL, ln='footBank', at='float', dv=0,  k=1)\n\n\t\t\t\t############################\n\t\t\t\t#Create ikFoot Nodes_________________________________________________________________________\n\t\t\t\t############################\n\n\t\t\t\t#BankNodes\n\t\t\t\tbankIn=mc.createNode('condition',n= joint.replace('JNT', 'bankInCOND'))\n\t\t\t\tbankExt=mc.createNode('condition',n= joint.replace('JNT', 'bankExtCOND'))\n\n\t\t\t\tmc.connectAttr(ikCTRL+'.footBank',bankIn+'.colorIfTrueR' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.footBank',bankIn+'.firstTerm' )\n\t\t\t\tif joint.startswith('R_')==True:\n\t\t\t\t\tmc.setAttr(bankIn+'.operation', 3)\n\t\t\t\telse:\n\t\t\t\t\tmc.setAttr(bankIn+'.operation', 5)\n\n\t\t\t\tmc.setAttr(bankIn+'.colorIfFalseR', 0)\n\t\t\t\tmc.setAttr(bankIn+'.colorIfFalseG', 0)\n\t\t\t\tmc.setAttr(bankIn+'.colorIfFalseB', 0)\n\n\t\t\t\tmc.connectAttr(ikCTRL+'.footBank',bankExt+'.colorIfTrueR' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.footBank',bankExt+'.firstTerm' )\n\t\t\t\tif joint.startswith('R_')==True:\n\t\t\t\t\tmc.setAttr(bankExt+'.operation', 5)\n\t\t\t\telse:\n\t\t\t\t\tmc.setAttr(bankExt+'.operation', 3)\n\n\t\t\t\tmc.setAttr(bankExt+'.colorIfFalseR', 0)\n\t\t\t\tmc.setAttr(bankExt+'.colorIfFalseG', 0)\n\t\t\t\tmc.setAttr(bankExt+'.colorIfFalseB', 0)\n\n\t\t\t\t#footRoll and Angle Nodes__________________________________________________________\n\n\t\t\t\tfootFixDir=mc.createNode('multiplyDivide',n= joint.replace('JNT', 'fixDirectionMD'))\n\t\t\t\tmc.connectAttr(ikCTRL+'.rollAngle', footFixDir+'.input1X')\n\t\t\t\tmc.setAttr(footFixDir+'.input2X', -1)\n\n\t\t\t\tfootPMA=mc.createNode('plusMinusAverage',n= joint.replace('JNT', 'PMA'))\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll', footPMA+'.input2D[0].input2Dx')\n\t\t\t\tmc.connectAttr(footFixDir+'.outputX', footPMA+'.input2D[1].input2Dx')\n\n\t\t\t\tfootA=mc.createNode('condition',n= joint.replace('JNT', 'ACOND'))\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll',footA+'.colorIfTrueR' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll',footA+'.firstTerm' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.rollAngle',footA+'.secondTerm' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.rollAngle',footA+'.colorIfFalseR' )\n\t\t\t\tmc.setAttr(footA+'.operation', 5)\n\n\t\t\t\tfootB=mc.createNode('condition',n= joint.replace('JNT', 'BCOND'))\n\t\t\t\tmc.connectAttr(footPMA+'.output2Dx',footB+'.colorIfTrueR' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll',footB+'.firstTerm' )\n\t\t\t\tmc.connectAttr(ikCTRL+'.rollAngle',footB+'.secondTerm' )\n\t\t\t\tmc.setAttr(footB+'.colorIfFalseR', 0 )\n\t\t\t\tmc.setAttr(footB+'.operation', 3)\n\n\t\t\t\tfootC=mc.createNode('condition',n= joint.replace('JNT', 'CCOND'))\t\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll',footC+'.firstTerm')\t\n\t\t\t\tmc.connectAttr(ikCTRL+'.footRoll', footC+'.colorIfFalseR' )\n\t\t\t\tmc.setAttr(footC+'.operation', 3)\n\n\t\t\t\toutputMD=mc.createNode('multiplyDivide',n= joint.replace('JNT', 'outputMD'))\n\t\t\t\tmc.connectAttr(footA+'.outColorR', outputMD+'.input1X')\n\t\t\t\tmc.connectAttr(footB+'.outColorR', outputMD+'.input1Y')\n\t\t\t\tmc.connectAttr(footC+'.outColorR', outputMD+'.input1Z')\t\n\n\t\t\t\tfootAOutput=mc.createNode('condition',n= joint.replace('JNT', 'AOutputCOND'))\n\t\t\t\tmc.connectAttr(outputMD+'.outputX',footAOutput+'.firstTerm' )\n\t\t\t\tmc.connectAttr(outputMD+'.outputX',footAOutput+'.colorIfFalseR' )\n\t\t\t\tmc.setAttr(footAOutput+'.operation', 5)\n\t\t\t\t\n\t\t\t\t#######################\n\t\t\t\t#ikFoot Inverse Drivers\n\t\t\t\t#######################\t\t\t\t\n\t\t\t\t\n\t\t\t\tfootPos=absFunc.getDoubleDictJson(jointsDataPath, joint, 'translate')\n\t\t\t\ttempLoc=mc.spaceLocator(n='loca1')\n\t\t\t\tmc.xform(tempLoc, t=(footPos[0],footPos[1],footPos[2]), ws=1)\n\t\t\t\ttempList=mc.ls(tempLoc)\n\t\t\t\tallPoints=[joint] +locatorsList+tempList\t\t\t\t\n\t\t\t\tmc.select(cl=1)\n\t\t\t\tallInverse=[]\n\t\t\t\tfor i in allPoints:\n\t\t\t\t\tindex=allPoints.index(i)\n\t\t\t\t\tpos=mc.xform(i, q=1, t=1, ws=1)\n\t\t\t\t\trot=mc.xform(i, q=1, ro=1, ws=1)\n\n\t\t\t\t\tinverseJoint=mc.joint(n=joint.replace('01_JNT', '0'+str(index)+'_ikInverseJoint'))\n\t\t\t\t\tmc.xform(inverseJoint, t=(0,0,0), ws=1)\n\t\t\t\t\tmc.xform(inverseJoint, ro=(0,0,0), ws=1)\n\t\t\t\t\tif mc.listRelatives(inverseJoint, p=1)!=None:\n\t\t\t\t\t\ttempDad=mc.listRelatives(inverseJoint, p=1)[0]\n\t\t\t\t\tinverseGRP=mc.createNode('transform',n=joint.replace('01_JNT', '0'+str(index)+'_ikInverseJointGRP') )\n\t\t\t\t\t\n\t\t\t\t\tmc.parent(inverseJoint, inverseGRP)\n\t\t\t\t\tallInverse.append(inverseJoint)\n\t\t\t\t\t\n\t\t\t\t\tif index ==0:\n\t\t\t\t\t\tmc.xform(inverseGRP, t=(footPos[0],footPos[1],footPos[2]), ws=1)\t\t\t\t\t\t\n\t\t\t\t\t\tmc.parent(inverseGRP, scalableDriverJoints)\n\t\t\t\t\t#elif index==-1:\n\t\t\t\t\t\t#mc.xform(inverseGRP, t=(footPos[0],footPos[1],footPos[2]), ws=1)\n\t\t\t\t\t\t#mc.xform(inverseGRP, ro=rot, ws=1)\n\t\t\t\t\telse:\n\t\t\t\t\t\tmc.xform(inverseGRP, t=pos, ws=1)\n\t\t\t\t\t\tmc.xform(inverseGRP, ro=rot, ws=1)\n\t\t\t\t\t\t#mc.makeIdentity(inverseJoint, a=1)\n\t\t\t\t\t\tmc.parent(inverseGRP, tempDad)\n\t\t\t\t\t\n\t\t\t\t\tif index==0:\n\t\t\t\t\t\tmc.parentConstraint(ikCTRL, inverseGRP, mo=1)\n\t\t\t\t\t\tmc.connectAttr(ikCTRL+'.s', inverseGRP+'.s', f=1)\n\t\t\t\t\tif index==1:\n\t\t\t\t\t\tmc.connectAttr(bankIn+'.outColorR', inverseGRP+'.rz')\n\t\t\t\t\tif index==2:\n\t\t\t\t\t\tmc.connectAttr(bankExt+'.outColorR', inverseGRP+'.rz')\n\t\t\t\t\tif index==3:\n\t\t\t\t\t\tmc.connectAttr(outputMD+'.outputZ', inverseGRP+'.rx')\n\t\t\t\t\tif index==4:\n\t\t\t\t\t\tmc.connectAttr(outputMD+'.outputY', inverseGRP+'.rx')\n\t\t\t\t\t\tmc.orientConstraint(inverseJoint, ikJointsList[1], mo=1)\n\t\t\t\t\tif index==5:\n\t\t\t\t\t\tmc.connectAttr(footAOutput+'.outColorR', inverseGRP+'.rx')\n\t\t\t\t\t\tmc.orientConstraint(inverseJoint, ikJointsList[0], mo=1)\n\t\t\t\t\tmc.select(inverseJoint)\n\t\t\t\tmc.delete(tempLoc)\t\t\t\t\n\t\t\t\tif mc.objExists(ikHandleGRP+'_parentConstraint1')==True:\n\t\t\t\t\tmc.delete(ikHandleGRP+'_parentConstraint1')\n\t\t\t\t\tmc.parentConstraint(allInverse[-1], ikHandleGRP, mo=1)\t\t\t\t\t\n\t\t\t\t\tmc.setAttr(ikControlModuleParent+'.v', 0)\n\t\t\t\t\tmc.addAttr(ikCTRL, ln='size', at='float', min=0.01,dv=1, k=1)\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleX')\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleY')\n\t\t\t\t\tmc.connectAttr(ikCTRL+'.size', ikCTRL+'.scaleZ')\n\t\t\t\t\t#mc.connectAttr(ikCTRL+'.s', footIkParent+'.s', f=1)\n\t\t\t\t\t#mc.connectAttr(ikCTRL+'.s', scaleGRP+'.s', f=1)\n\t\t\t\t\t#mc.scaleConstraint(ikCTRL, scaleGRP, mo=1)\n\t\t\t\t\tmc.scaleConstraint(ikCTRL, footJoints[0].replace('JNT','ikJNT'), mo=1)\n\t\t\t\t\tmc.orientConstraint(ikCTRL, footIkParent, mo=1)\n\t\t\t\t\t\n\t\t\t\tif mc.objExists(stretchIKLoc+'_parentConstraint1')==True:\n\t\t\t\t\tmc.delete(stretchIKLoc+'_parentConstraint1')\n\t\t\t\t\tmc.parentConstraint(allInverse[-1], stretchIKLoc, mo=1)\n\t\t\t\t\ttoDelete=ikControlModuleParent.replace('CTRL', 'ZTR')\t\t\t\t\t\n\t\t\t\t\tmc.delete(toDelete)\n\t\t\t\t\n\t\t\t\t#fk Joints____________________________________________________________________\n\t\t\t\tfootJoints=absFunc.getDoubleDictJson(footDataPath, joint, 'joints')\n\t\t\t\tswitchCtrl=absFunc.getDoubleDictJson(footDataPath, joint, 'switchControl')\n\t\t\t\tfootParent=absFunc.getDoubleDictJson(footDataPath, joint, 'footParent')\n\t\t\t\t\n\t\t\t\tfor x in footJoints:\n\t\t\t\t\tindex=footJoints.index(x)\n\t\t\t\t\tjointCoord=absFunc.getDoubleDictJson(jointsDataPath, x, 'translate')\n\t\t\t\t\tjointOrient=absFunc.getDoubleDictJson(jointsDataPath, x, 'jointOrient')\n\t\t\t\t\tif index == 0:\n\t\t\t\t\t\tmc.select(cl=1)\n\t\t\t\t\tfkJoint=mc.joint(n=x.replace('JNT', 'fkJNT'))\n\t\t\t\t\t\n\t\t\t\t\tif index == 0:\n\t\t\t\t\t\tfkParent=footParent.replace('JNT', 'fkJNT')\n\t\t\t\t\t\tmc.parent(fkJoint, fkParent)\n\t\t\t\t\t\tmc.joint(fkJoint, e=1, p=(jointCoord[0],jointCoord[1],jointCoord[2]) ,o=(jointOrient[0],jointOrient[1],jointOrient[2]))\n\t\t\t\t\telse:\n\t\t\t\t\t\tmc.joint(fkJoint, e=1, p=(jointCoord[0],jointCoord[1],jointCoord[2]) ,o=(jointOrient[0],jointOrient[1],jointOrient[2]))\n\n\t\t\t\t\tmc.makeIdentity(fkJoint, a=1)\t\t\t\t\n\n\t\t\t\tfor i in footJoints:\n\t\t\t\t\tcontrolCoord=absFunc.getDoubleDictJson(jointsDataPath, i, 'translate')\n\t\t\t\t\tcontrolOrient=absFunc.getDoubleDictJson(jointsDataPath, i, 'worldOrient')\n\t\t\t\t\tif i.endswith('endJNT')==False:\n\t\t\t\t\t\tindex=footJoints.index(i)\n\t\t\t\t\t\tfkJoint=i.replace('JNT', 'fkJNT')\t\t\t\t\t\t\n\t\t\t\t\t\tif index==0:\n\t\t\t\t\t\t\tif mc.objExists(i.replace('JNT','fkZTR'))==True:\n\t\t\t\t\t\t\t\tmc.delete(i.replace('JNT','fkZTR'))\n\t\t\t\t\t\t\ttempGrandPa=mc.listRelatives(footParent, p=1)[0]\n\t\t\t\t\t\t\ttempGrandPaCTRL=tempGrandPa.replace('JNT', 'fkCTRL')\n\t\t\t\t\t\t\ttempGrandPa=tempGrandPa.replace('JNT', 'fkZTR')\n\t\t\t\t\t\t\ttempGrandPa=mc.listRelatives(tempGrandPa, p=1)[0]\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfkFootZTR=mc.createNode('transform', n=i.replace('JNT','fkZTR'), p=tempGrandPa)\t\t\t\t\t\t\t\n\t\t\t\t\t\telse:\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfkFootZTR=mc.createNode('transform', n=i.replace('JNT','fkZTR'), p='C_main_01_CTRL')\t\t\t\t\t\n\n\t\t\t\t\t\tfkFootCONS=mc.createNode('transform', n=i.replace('JNT','fkCONS'), p=fkFootZTR)\n\t\t\t\t\t\tfkCTRL=mc.createNode('transform', n=i.replace('JNT','fkCTRL'), p=fkFootCONS)\n\t\t\t\t\t\ttempCTRL=absFunc.getDoubleDictJson(jointsDataPath, i, 'controlName')\n\t\t\t\t\t\tmc.xform(fkFootZTR, t=controlCoord, ws=1)\n\t\t\t\t\t\tmc.xform(fkFootZTR, ro=controlOrient, ws=1)\n\t\t\t\t\t\tabsFunc.extractControl(fkCTRL, tempCTRL)\t\t\t\t\t\t\n\n\t\t\t\t\t\tif index==0:\n\t\t\t\t\t\t\tmc.parentConstraint(tempGrandPaCTRL, fkFootCONS, mo=1)\n\t\t\t\t\t\t\tmc.parentConstraint(fkCTRL, fkJoint, mo=1)\n\t\t\t\t\t\telif index==1:\n\t\t\t\t\t\t\tmc.parentConstraint(footJoints[1], fkFootCONS, mo=1)\n\t\t\t\t\t\t\tmc.scaleConstraint(footJoints[1], fkFootCONS, mo=1)\n\t\t\t\t\t\t\tmc.parentConstraint(fkCTRL, footJoints[2], mo=1)\n\t\t\t\t\t\t\tmc.scaleConstraint(fkCTRL, footJoints[2], mo=1)\n\n\t\t\t\tfor sj in footJoints:\n\t\t\t\t\tif sj.endswith('endJNT')==False:\n\t\t\t\t\t\trev=switchCtrl.replace('switchCTRL', 'reverse')\n\t\t\t\t\t\tikj=sj.replace('JNT','ikJNT')\n\t\t\t\t\t\tfkj=sj.replace('JNT','fkJNT')\n\t\t\t\t\t\tblend=mc.createNode('blendColors', n=sj.replace('JNT', 'BC'))\n\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', blend+'.blender')\n\t\t\t\t\t\tmc.connectAttr(ikj+'.scaleX', blend+'.color2R')\n\t\t\t\t\t\tmc.connectAttr(ikj+'.scaleY', blend+'.color2G')\n\t\t\t\t\t\tmc.connectAttr(ikj+'.scaleZ', blend+'.color2B')\n\n\t\t\t\t\t\tmc.connectAttr(fkj+'.scaleX', blend+'.color1R')\n\t\t\t\t\t\tmc.connectAttr(fkj+'.scaleY', blend+'.color1G')\n\t\t\t\t\t\tmc.connectAttr(fkj+'.scaleZ', blend+'.color1B')\n\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputR', sj+'.scaleX')\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputG', sj+'.scaleY')\n\t\t\t\t\t\tmc.connectAttr(blend+'.outputB', sj+'.scaleZ')\t\t\t\t\t\t\n\t\t\t\t\t\tif a == ikStart:\n\t\t\t\t\t\t\tpointCons=mc.pointConstraint(ik, fk, a, mo=1)\n\t\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', pointCons[0]+'.'+fk+'W1')\n\t\t\t\t\t\t\tmc.connectAttr(rev+'.outputX', pointCons[0]+'.'+ik+'W0')\n\t\t\t\t\t\t\n\t\t\t\t\t\toriCons=mc.orientConstraint(ikj, fkj, sj, mo=1)\t\t\n\t\t\t\t\t\tmc.setAttr(oriCons[0]+'.interpType', 2)\n\t\t\t\t\t\tmc.connectAttr(switchCtrl+'.IK_FK', oriCons[0]+'.'+fkj+'W1')\n\t\t\t\t\t\tmc.connectAttr(rev+'.outputX', oriCons[0]+'.'+ikj+'W0')\t\t\t\n\t\t\t#IK MONO------------------------------------------------------------------------------------------\n\t\t\t#----------------------------------------------------------------------------------------------\n\t\t\tif joint == absFunc.getDoubleDictJson(ikMonoDataPath, joint, 'joint'):\t\t\t\t\n\n\t\t\t\tbase=absFunc.getDoubleDictJson(ikMonoDataPath, joint, 'joint')\n\t\t\t\ttip=absFunc.getDoubleDictJson(ikMonoDataPath, joint, 'child')\n\t\t\t\tparent=absFunc.getDoubleDictJson(ikMonoDataPath, joint, 'parent')\n\t\t\t\tparentDad=mc.listRelatives(parent, p=1)[0]\n\t\t\t\tif mc.objExists(parentDad.replace('JNT', 'CTRL'))==True:\n\t\t\t\t\tdad=parentDad.replace('JNT', 'CTRL')\n\t\t\t\telif mc.objExists(parentDad.replace('JNT', 'ikCTRL'))==True:\n\t\t\t\t\tdad=parentDad.replace('JNT', 'ikCTRL')\n\n\t\t\t\thandleGRP=mc.createNode('transform', n=base.replace('JNT','ikHandleGRP'))\n\t\t\t\thandle = mc.ikHandle(sj=base, ee=tip, sol='ikRPsolver', n=base.replace('JNT','ikHandle'))[0]\n\t\t\t\tmc.delete(mc.pointConstraint(handle, handleGRP, mo=0))\n\t\t\t\tmc.parent(handle, handleGRP)\n\n\t\t\t\tbaseCoord=absFunc.getDoubleDictJson(jointsDataPath, base, 'translate')\n\t\t\t\ttipCoord=absFunc.getDoubleDictJson(jointsDataPath, tip, 'translate')\n\t\t\t\tparentPos=absFunc.getDoubleDictJson(jointsDataPath, parent, 'translate')\n\t\t\t\tparentOrient=absFunc.getDoubleDictJson(jointsDataPath, base, 'worldOrient')\n\t\t\t\tmc.distanceDimension(ep=(0,0,1), sp= (0,0,10))\n\t\t\t\tloc1=mc.rename('locator1', base.replace('JNT', 'distLoc'))\n\t\t\t\tloc2=mc.rename('locator2', tip.replace('JNT', 'distLoc'))\n\t\t\t\tdist=mc.rename('distanceDimension1', tip.replace('JNT', 'distDimension'))\n\t\t\t\tmc.xform(loc1, t=(baseCoord[0],baseCoord[1],baseCoord[2]),ws=1)\n\t\t\t\tmc.xform(loc2, t=(tipCoord[0],tipCoord[1],tipCoord[2]),ws=1)\n\t\t\t\tdistGrp=mc.createNode('transform', n=base.replace('JNT', 'distGRP'))\n\t\t\t\tmc.parent(handleGRP, distGrp)\n\t\t\t\t_obj=[loc1, loc2, dist]\n\t\t\t\tgroups=absFunc.localGrp(_obj)\t\t\t\t\n\t\t\t\tmc.parent(groups, distGrp)\n\t\t\t\tmc.parent(distGrp, 'dft_GRP')\n\n\t\t\t\tloc1Dad=mc.listRelatives(loc1, p=1)[0]\n\t\t\t\tloc2Dad=mc.listRelatives(loc2, p=1)[0]\n\n\t\t\t\tztr=mc.createNode('transform', n=base.replace('JNT','ZTR'))\n\t\t\t\tcons=mc.createNode('transform', n=base.replace('JNT','CONS'), p=ztr)\n\t\t\t\tCTRL=mc.createNode('transform', n=base.replace('JNT','CTRL'), p=cons)\n\t\t\t\ttempCtrl=absFunc.getDoubleDictJson(jointsDataPath, joint, 'controlName')\n\n\t\t\t\tmc.parent(ztr, dad )\n\t\t\t\tmc.xform(ztr, t=(parentPos[0], parentPos[1], parentPos[2]), ws=1)\n\t\t\t\tmc.xform(ztr, ro=(parentOrient[0], parentOrient[1], parentOrient[2]), ws=1)\n\n\t\t\t\tabsFunc.extractControl(CTRL, tempCtrl)\n\t\t\t\tmc.parentConstraint(CTRL, parent, mo=1)\n\t\t\t\tmc.parentConstraint(CTRL, loc1Dad, mo=1)\n\t\t\t\tmc.parentConstraint(handle, loc2Dad, mo=1)\n\t\t\t\tmc.parentConstraint(CTRL, handleGRP, mo=1)\n\n\t\t\t\tmdFixStretch=mc.createNode('multiplyDivide', n=base.replace('JNT', 'StretchFix_MD'))\n\t\t\t\tmdStretch=mc.createNode('multiplyDivide', n=base.replace('JNT', 'Stretch_MD'))\n\t\t\t\tcondStretch=mc.createNode('condition', n=base.replace('JNT', 'Stretch_COND'))\n\n\t\t\t\tmc.connectAttr(dist+'Shape.distance', mdFixStretch+'.input1X')\n\t\t\t\tmc.connectAttr('C_root_01_CTRL.scaleX', mdFixStretch+'.input2X')\n\t\t\t\tmc.setAttr(mdFixStretch+'.operation', 2)\n\n\t\t\t\tmc.connectAttr(mdFixStretch+'.outputX', mdStretch +'.input1X')\n\t\t\t\tdistNum=mc.getAttr(mdStretch+'.input1X')\n\t\t\t\tmc.setAttr(mdStretch+'.input2X', distNum)\n\t\t\t\tmc.setAttr(mdStretch+'.operation', 2)\n\n\t\t\t\tmc.connectAttr(mdStretch+'.outputX', condStretch+'.firstTerm')\n\t\t\t\tmc.connectAttr(mdStretch+'.outputX', condStretch+'.colorIfTrueR')\n\t\t\t\tmc.connectAttr(mdStretch+'.outputX', condStretch+'.colorIfFalseR')\n\t\t\t\tmc.setAttr(condStretch+'.secondTerm', 1)\n\t\t\t\t#mc.setAttr(condStretch+'.colorIfFalse', 1,1,1)\n\t\t\t\tmc.setAttr(condStretch+'.operation', 3)\n\n\t\t\t\tmc.connectAttr(condStretch+'.outColorR', base+'.scaleY')\n\n\t\t\t\tmdSquash=mc.createNode('multiplyDivide', n=base.replace('JNT', 'Squash_MD'))\n\t\t\t\tmc.setAttr(mdSquash+'.operation', 3)\t\n\t\t\t\tmc.connectAttr(mdStretch+'.outputX', mdSquash+'.input1X')\n\t\t\t\tmc.setAttr(mdSquash+'.input2X', -1)\n\n\t\t\t\tsquashCond=mc.createNode('condition', n=base.replace('JNT', 'Squash_COND'))\n\t\t\t\tmc.setAttr(squashCond+'.operation', 4)\n\t\t\t\tmc.setAttr(squashCond+'.secondTerm', 1)\n\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.firstTerm')\n\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.colorIfTrueR')\n\t\t\t\tmc.connectAttr(mdSquash+'.outputX', squashCond+'.colorIfFalseR')\n\n\t\t\t\tmc.connectAttr(squashCond+'.outColorR', base+'.scaleX')\n\t\t\t\tmc.connectAttr(squashCond+'.outColorR', base+'.scaleZ')\n\t\t\t\n\t\t\t#Ribbon---------------------------------------------------------------------------------\t\t\t\n\t\t\tif absFunc.getDoubleDictJson(modulesDataPath, module, 'ribbon') ==1:\n\t\t\t\tjointQty=absFunc.getDoubleDictJson(modulesDataPath, module, 'twistJoints')\n\t\t\t\tjointChild=mc.listRelatives(joint, c=1)[0]\n\t\t\t\tabsFunc.applyLimbRibbon(joint, jointChild, jointQty, joint.replace('JNT', 'NURBS'))\n\t\t\t\tsleeve=absFunc.getDoubleDictJson(modulesDataPath, module, 'sleeve')\n\t\t\t\t#Sleeve------------------------\n\t\t\t\tif sleeve==1:\n\t\t\t\t\tsleeveRibbon=absFunc.applyLimbRibbon(joint, jointChild, jointQty, joint.replace('JNT', 'sleeve_NURBS'), _sleeve=1)\n\n\t\t\t\t\tcontrols=absFunc.getDoubleDictJson(sleeveDataPath, joint, 'controls')\n\n\t\t\t\t\tmaingrp=mc.createNode('transform', n=joint.replace('JNT', 'sleeveGRP'), p='C_main_01_CTRL')\n\t\t\t\t\tmaincons=mc.createNode('transform', n=joint.replace('JNT', 'sleeveCONS'), p=maingrp)\n\t\t\t\t\tmainztr=mc.createNode('transform', n=joint.replace('JNT', 'sleeveZTR'), p=maincons)\n\t\t\t\t\tif maingrp.startswith('R_')==True:\n\t\t\t\t\t\tmc.setAttr(maingrp+'.scaleX', -1)\n\t\t\t\t\t\n\t\t\t\t\ttempMain=absFunc.getDoubleDictJson(sleeveDataPath, joint, 'main')\n\t\t\t\t\tmainCoord=mc.xform(tempMain, q=1, t=1, ws=1)\n\t\t\t\t\tmainOri=mc.xform(tempMain, q=1, ro=1, ws=1)\n\t\t\t\t\tmc.xform(maingrp, t=mainCoord, ws=1)\n\t\t\t\t\tmc.xform(maingrp, ro=mainOri, ws=1)\n\n\t\t\t\t\tdistances=[]\n\t\t\t\t\tvalues=[]\n\t\t\t\t\tlocs=[]\n\t\t\t\t\tfor d in sleeveRibbon:\n\t\t\t\t\t\tmc.distanceDimension(ep=(0,0,1), sp= (0,0,10))\n\t\t\t\t\t\tloc1=mc.rename('locator1', d+'_startTempLoc')\n\t\t\t\t\t\tloc2=mc.rename('locator2', d+'_EndTempLoc')\n\t\t\t\t\t\tdist=mc.rename('distanceDimension1', d+'_tempDistDimension')\n\t\t\t\t\t\tmc.pointConstraint(d, loc1)\n\t\t\t\t\t\tmc.pointConstraint(maingrp, loc2)\n\t\t\t\t\t\tvalue=mc.getAttr(dist+'.distance')\n\t\t\t\t\t\tvalues.append(value)\n\t\t\t\t\t\tdistances.append(dist)\n\t\t\t\t\t\tlocs.append(loc1)\n\t\t\t\t\t\tlocs.append(loc2)\n\t\t\t\t\t\n\t\t\t\t\tminValue=min(values)\n\n\t\t\t\t\tfor s in distances:\n\t\t\t\t\t\tvalue=mc.getAttr(s+'.distance')\n\t\t\t\t\t\tif minValue==value:\n\t\t\t\t\t\t\tminiJoint=s.replace('_tempDistDimension','')\n\t\t\t\t\tmc.delete(locs)\n\n\t\t\t\t\tmc.parentConstraint(miniJoint, maincons, mo=1)\n\n\t\t\t\t\tcurveCoords=[]\n\t\t\t\t\tfor j in controls:\n\t\t\t\t\t\tcontrolCoord=mc.xform(j, q=1, t=1, ws=1)\n\t\t\t\t\t\tcurveCoords.append(controlCoord)\n\n\t\t\t\t\tcurve=mc.curve( ep=curveCoords, d=1)\n\t\t\t\t\tcurve=mc.rename(curve, joint.replace('JNT','sleeveCTRL'))\n\t\t\t\t\tmc.closeCurve(curve,ch=1, ps=1, rpo=1, bb=0.5, bki=0, p=0.1)\n\t\t\t\t\tmc.parent(curve, mainztr)\n\t\t\t\t\tmc.xform(curve, cpc=1)\n\t\t\t\t\tmc.makeIdentity(curve, a=1)\n\n\t\t\t\t\tfor i in controls:\n\t\t\t\t\t\tcoord=mc.xform(i,q=1, t=1, ws=1)\n\t\t\t\t\t\tori=mc.xform(i,q=1, ro=1, ws=1)\n\t\t\t\t\t\tindex=controls.index(i)\n\t\t\t\t\t\tztr=mc.createNode('transform', n=joint.replace('JNT', str(index)+'sleeveZTR'), p=curve)\n\t\t\t\t\t\tCTRL=mc.createNode('transform', n=joint.replace('JNT', str(index)+'sleeveCTRL'), p=ztr)\n\t\t\t\t\t\tmc.xform(ztr, t=coord, ws=1 )\n\t\t\t\t\t\tmc.xform(ztr, ro=ori, ws=1 )\n\t\t\t\t\t\tabsFunc.extractControl(CTRL, i)\n\n\t\t\t\t\t\tsleevejnt=mc.joint(n=joint.replace('JNT', str(index)+'sleeveJNT'), p=coord, o=ori)\n\t\t\t\t\t\tmc.parent(sleevejnt, miniJoint)\n\t\t\t\t\t\tmc.parentConstraint(CTRL, sleevejnt, mo=0)\n\n\n\n\n\t\tself.statusBar.setStyleSheet(\"QStatusBar{color:rgb(3, 255, 11);background-color: rgb(30, 30, 30);}\")\n\t\tself.statusBar.showMessage('Rig Done', 15000)\n\t\t\t#Face-------------------------------------------------------------------------------------------\n\n\t\t\n\t\t'''\n\t\tif self.checkBox_finalRig.isChecked():\n\t\t\tpass\n\n\t\telif not self.checkBox_finalRig.isChecked():\n\t\t'''\n\n\n\n\n\n##--------------------------------------------------------------------------------------------\n## MAIN\n##-------------------------------------------------------------------------------------------- \n\ndef runApp():\n\tfor qt in QtWidgets.QApplication.topLevelWidgets():\n\t\ttry:\n\t\t\tqtname = qt.objectName()\n\t\t\tif qtname == \"jenAutorig_MainWindow\":\n\t\t\t\tprint \"found qtmainwindow of script instance match, destroy it\"\n\t\t\t\tqt.close()\n\t\texcept:\n\t\t\tpass\n\tapp = ProgramUI()\n\tapp.show()\n\nrunApp()\n\n\n",
			"file": "jenAutoRig/jenAutorigWin.py",
			"file_size": 181053,
			"file_write_time": 131935334969692175,
			"settings":
			{
				"buffer_size": 125457,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 203.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"maya",
				"Preferences: Maya Settings"
			],
			[
				"ins",
				"Package Control: Install Package"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 130.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/eduardomelgar/Dropbox/JENtools",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom"
	],
	"file_history":
	[
		"/C/Users/eduardomelgar/Dropbox/JENtools/functions/abstractFunctions.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/sleeveData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/sleevesData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/bindSpaces.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/AutoK.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/newRibbon.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/modulesData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/ikStretch2Selection.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/ikMono.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/footData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/ikData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/newRibbonNewAxis.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/RigTool/edu_rigTool.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/Usables/baseModule.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/eRename.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/hands.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/controlOnPointsLattices.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/jointsData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/jenAutoRig/jenAutorigWin.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/handData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/randomBlinnColor.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/1Test/Rigging/setup/setupData/setupGenerateData/jointsData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/1Test/Rigging/setup/setupData/setupGenerateData/ikData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/references/tx_stickyController/tx_stickyPoint/universal/tx_stickyPoint.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/references/tx_stickyController/controller.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/references/tx_stickyController/ui.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/references/tx_stickyController/install.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/jenAutoRig/autorig_buildrefe.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/setupGenerateData/hipData.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/__init__.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/pointersData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/orientMeshesData.json",
		"/G/WWD_3D/STORE/CACHE/SEQ_002_INTC/s_290/Published/Skinfix/Commander__001.json",
		"/G/WWD_3D/STORE/CACHE/SEQ_002_INTC/s_290/Published/Skinfix/MadScientist__000.json",
		"/G/WWD_3D/STORE/CACHE/SEQ_002_INTC/s_290/Published/MadScientist__000.json",
		"/G/WWD_3D/STORE/CACHE/SEQ_002_INTC/s_290/Published/Commander__000.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/randomVertexColor.py",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/proxyControlsData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/setup/setupData/proxyLocatorsData.json",
		"/G/TempEdu_3D/ASSETS/CHARACTERS/0Test/Rigging/jenAutorig_projectPathNode.json",
		"/G/FileManager/Arcane2018/mxr/scripts/pipeline/rigPublisher/cfg/wildcards.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Commander/Rigging/RIG_Commander.0010.ma",
		"/G/WWD_3D/ASSETS/CHARACTERS/MadScientist/Rigging/RIG_MadScientist.0024.ma",
		"/G/WWD_3D/ASSETS/CHARACTERS/Generic/Rigging/RIG_Generic.0030.ma",
		"/G/WWD_3D/ASSETS/CHARACTERS/ChopChop/Rigging/RIG_ChopChop.0021.ma",
		"/G/WWD_3D/STORE/CACHE/MASTER/s_000/Published/Buck__000.json",
		"/G/WWD_3D/STORE/CACHE/SEQ_002_INTC/s_020/Published/Commander__000.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/Published/Data/RIG_Buck_Controls.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/Published/Data/Report_Buck_Mesh.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/Published/Data/RIG_Buck_Mesh.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/Published/Data/shd_Buck_Mesh.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/assetInfo.json",
		"/G/WWD_3D/ASSETS/CHARACTERS/Buck/Rigging/RIG_Buck.0008.ma",
		"/C/Users/eduardomelgar/Documents/maya/scripts/midJoint.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/facialSetup.py",
		"/C/Users/eduardomelgar/Documents/maya/scripts/sets.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/poseReader.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/simpleRibbon.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/randomJugadorFutbol.py",
		"/G/WWD_3D/ASSETS/PROPS/ProtestBanners/Rigging/RIG_ProtestBanners.0001.ma",
		"/G/WWD_3D/ASSETS/CHARACTERS/DRex/Published/Data/shd_DRex_Mesh.json",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/ribbonSleeveTwist.py",
		"/C/Users/eduardomelgar/Dropbox/JENtools/scriptsRandom/spacesConection.py",
		"/C/Users/eduardomelgar/Documents/maya/scripts/eRename.py",
		"/C/Users/eduardomelgar/AppData/Roaming/Sublime Text 3/Packages/Maya/Maya.sublime-settings"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"min(",
			"min",
			"distanceDimension",
			"Dist",
			"dist",
			"distanceDimension",
			",",
			"move",
			"sleeveControlGRP",
			"statusBar",
			"StatusBar",
			"statusBar",
			"StatusBar",
			"statusBar",
			"StatusBar",
			"statusBar",
			"StatusBar",
			"statusBar",
			"slee",
			"nt",
			"drvJnt",
			"drvJNT",
			"ctrl",
			"CTRL",
			"ctrl",
			"CTRL",
			"ctrl",
			"CTRL",
			"ctrl",
			"CTRL",
			"ctrl",
			"CTRL",
			"ctrls",
			"SleeveTwistLOC",
			"twistLOC",
			"twistLOCGRPB",
			"poleV",
			"__name__",
			"ribbonCTRL",
			"miniJoint",
			"switchCtrl",
			"switchCTRL",
			"switchCtrl",
			"ikZTRSwitch",
			"space",
			"3",
			"5",
			"pos",
			"posX",
			"2",
			"_child",
			"ro=(",
			"createNode",
			"controlName",
			"distanceDimension1",
			"ikMonoDataPath",
			" found",
			"Config File not found",
			"dft",
			"dftGrp",
			"store",
			"enum",
			"ikCTRL",
			"ikSpace",
			"ikCONS",
			"ikZTR",
			"ikCTRL",
			"ikStartParent",
			"ikstartParent",
			"C_root_01_CTRL",
			"ZTR",
			"extr",
			"disconnectAttr",
			"disc",
			"footJoints",
			"connectA",
			"ikParent",
			"footParent",
			"a",
			"fk",
			"ik",
			"W1",
			"sj",
			"rev",
			"ikData",
			"controlCoord",
			"driver",
			"ikFootZTR",
			"footParent",
			"IkParent",
			"fkParent",
			"pickWalk",
			"'size'",
			"addAttr",
			"ikTempCTRL",
			"ikEndChild",
			"ikJointsList",
			"extr",
			"ikJoint",
			"jointOrient",
			"footLocators",
			"footlocatorsList",
			"footLocGrp",
			"foo",
			"ikJoints",
			"footJoints",
			"ikJoint",
			"joint",
			"footPos",
			"locators",
			"footJoint",
			"addAttr",
			"footJoint",
			"coord",
			"e=1",
			"foo",
			"handDataPath",
			"_0",
			"spli",
			"connectAttr",
			"spread",
			"spreadAxis",
			"axis",
			"Axis",
			"axis",
			"x",
			"extrac",
			"maya"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "jenAutoRig/jenAutorigWin.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 125457,
						"regions":
						{
						},
						"selection":
						[
							[
								91336,
								91336
							]
						],
						"settings":
						{
							"SL.13.region_keys":
							[
							],
							"SL.130.region_keys":
							[
							],
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 33195.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 102.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "JENTools.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
